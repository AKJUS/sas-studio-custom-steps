{"type":"code","name":"Git - List Local Repo Changes.step","displayName":"Git - List Local Repo Changes.step","description":"","templates":{"SAS":"/* SAS templated code goes here */\n\n/* The below macro deals with cases when the user decides to promote their table to CAS */\n\n%macro promTable;\n\n/* Check if table needs to be promoted to CAS */\n   %if \"&promote_table.\" = \"1\" %then %do;\n\n/* Create a temporary CAS session */\n      cas temp_session;\n      caslib _all_ assign;\n\n\n/* Create a temporary session-scope CAS table to hold the table of changes */\n      data PUBLIC.TEMP_GIT_CHANGE_TABLE;\n         set &git_change_table.;\n      run;\n\n\n      proc cas;\n\n         /* Helper functions */\n\n         /* To check if an in-memory table exists in a caslib */\n         function doesTableExist(casLib, casTable);\n            table.tableExists result=tableExistsResultTable status=rc / caslib=casLib, table=casTable;\n            tableExists = dictionary(tableExistsResultTable, \"exists\");\n            return tableExists;\n         end;\n\n         /* To drop an in-memory table if it already exists */\n         function dropTableIfExists(casLib,casTable);\n            tableExists = doesTableExist(casLib, casTable);\n            if tableExists != 0 then do;\n               print \"Dropping table: \"||casLib||\".\"||casTable;\n               table.dropTable status=rc / caslib=casLib, table=casTable, quiet=True;\n               if rc.statusCode != 0 then do;\n                  exit();\n               end;\n            end;\n         end;\n\n/* End Helper Functions */\n\n         /* As the table needs to be promoted, both session and global table need to be removed (if they exist).   */\n         /* Therefore dropTableIfExist is called twice:                                                            */\n         /*  - If both session and global table exist, the first call will remove the session table,               */\n         /*      the second call will remote the global (promoted) table                                           */\n         /*  - If only session or global table exist, the first call will delete it, the second call is a no-op    */\n         /*  - If neither session or global table exist, both calls are no-op                                      */\n\n         dropTableIfExists(\"PUBLIC\",\"&gitChangeTableName.\");\n         dropTableIfExists(\"PUBLIC\",\"&gitChangeTableName.\");\n         print \"Trying run code\";\n         \n         /* Create a session-scope table based on the temporary table of changes */ \n         \n         dataStep.runCode /\n            code=\"data PUBLIC.&gitChangeTableName.; set PUBLIC.TEMP_GIT_CHANGE_TABLE;run;\";\n\n         /* Promote table to global scope within Public (ensure you can write to shared Public caslib) */\n         table.promote /\n            caslib= \"PUBLIC\"\n            name=\"&gitChangeTableName.\"\n            drop=True\n            targetlib= \"PUBLIC\"\n          ;\n      quit;\n\n/* Terminate temporary CAS session */\n      cas temp_session terminate;\n      \n   %end;\n\n%mend promTable;\n\n\n/* Check Folder provided */\ndata _null_;\ncall symput(\"serverType\",scan(\"&folderName.\",1,\":\",\"MO\"));\nrun;\n\n/* Carry out further activities only if folder is within filesystem */\n\n%if \"&serverType.\"=\"sasserver\" %then %do;\n\n/* Extract values from user interface */\n   data _null_;\n      call symput(\"folderName\",scan(\"&folderName.\",2,\":\",\"MO\"));\n      call symput(\"gitChangeTableName\", scan(\"&git_change_table.\",2,\".\",\"MO\"));\n   run;\n\n/* Obtain status and create dataset of changed files */\n   data &git_change_table.;\n      length path $2000. status $20. staged $10. folderName $100.;\n\n      folderName=\"&folderName.\";\n\n/* n contains the total number of files with a changed status */\n      n = git_status(\"&folderName.\");\n\n/* For each n, obtain status , path of file, and staged status */\n      do n = 1 to n;\n         rc1=git_status_get(n,\"&folderName.\", \"path\", path);\n         rc2=git_status_get(n,\"&folderName.\", \"status\", status);\n         rc3=git_status_get(n,\"&folderName.\",\"staged\", staged);\n         output;\n      end;\n   run;\n\n   %promTable;\n\n%end;\n%else %do;\n\n   %put \"Not a filesystem folder. Exiting\";\n\n%end;\n\n\n"},"properties":{},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"parameters\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Parameters\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"input_param\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Input Parameters\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"folderName\",\n\t\t\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\t\t\"label\": \"Select local repository:\",\n\t\t\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\t\t\"placeholder\": \"sasserver:/filesystem/path/to/folder\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"promote_table\",\n\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\"label\": \"Promote table to Cloud Analytics Services (Public caslib)\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note: Checking the above box will cause the step to attempt a connection to Cloud Analytics Services (CAS).  Ensure that you have an accessible CAS server and permission to write to the Public caslib in your environment.\",\n\t\t\t\t\t\t\t\"visible\": \"$promote_table\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"git_change_table\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Table listing changes:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"WORK.EXAMPLE_TABLE_OF_CHANGES\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"about\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Git - List Local Repo Changes\\n\\nThis custom step identifies and lists changed files within a local copy of a Git repository folder.  A change is defined as either creating a new file in the folder, deleting an existing file, or modifying an existing file.\\n\\nPlease refer to this page for the motivation behind custom steps which surface Git functionality: https://github.com/SundareshSankaran/sas-studio-custom-steps/blob/main/Git%20-%20Clone%20Git%20Repo/Overview%20of%20Git-related%20Custom%20Steps.md \\n\\nThe custom step also informs you if the changes have been \\\"staged\\\", i.e. marked for a future commit to a remote Git repository.\\n\\nGit repositories facilitate easy collaborative development of code. Analysts as well as administrators will find this step useful in terms of logging changes and earmarking them for commit to a centralized codebase. \\n\\nParameters:\\n\\nInput Parameters:\\n\\n1. Local repository folder: This should be a folder on your filesystem.  Ensure that this is a Git folder, i.e., it was originally cloned from a Git repository.\\n\\n2. (Optional) Promote table to Cloud Analytics Services : if checked, this will lead to the output table getting loaded to a CAS (in-memory) table, therefore making it convenient to be viewed in Visual Analytics.  This means that you require the CAS server to be operational (and accessible) at the time of running this custom step.\\n\\nOutput ports / tables:\\n\\n1. Git changes table: Connect a table to the output port which will be used to store the list of changed files (if any) along with the type of change (new, modified, deleted) and whether this change has been staged (true/false).  \\n\\nSAS documentation:\\n\\n1. Understanding Git Integration in SAS Studio: https://go.documentation.sas.com/doc/en/sasstudiocdc/default/webeditorcdc/webeditorug/p0puc7muifjjycn1uemlm9lj1jkt.htm\\n2. Using Git Functions in SAS: https://go.documentation.sas.com/doc/en/pgmsascdc/default/lefunctionsref/n1mlc3f9w9zh9fn13qswiq6hrta0.htm\\n3. GIT_STATUS SAS function: https://go.documentation.sas.com/doc/en/pgmsascdc/default/lefunctionsref/p0yqhk2d71ywe7n1dyhko23hrhmo.htm\\n4. GIT_STATUS_GET SAS function: https://go.documentation.sas.com/doc/en/pgmsascdc/default/lefunctionsref/p08kns1urxcrfyn1uj7k2g26owlf.htm\\n\\nCreated / contact : \\n\\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com)\\n- Danny Zimmerman (danny.zimmerman@sas.com)\\n\\nVersion : 1.0.   (07FEB2023)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"folderName\": \"\",\n\t\t\"promote_table\": false,\n\t\t\"git_change_table\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t}\n\t}\n}","flowMetadata":{"inputPorts":[],"outputPorts":[{"name":"git_change_table","displayName":"git_change_table","minEntries":1,"maxEntries":1,"columnDelta":null,"type":"table"}]}}