{"type":"code","name":"SDG - Train a Synthetic Data Generator through GANs.step","displayName":"SDG - Train a Synthetic Data Generator through GANs.step","description":"","templates":{"SAS":"/*-----------------------------------------------------------------------------------------*\n   START MACRO DEFINITIONS.\n*------------------------------------------------------------------------------------------*/\n\n/* -----------------------------------------------------------------------------------------* \n   Create a global macro variable for the trigger to run this custom step. A value of 1 \n   (the default) enables this custom step to run.  A value of 0 (provided by upstream code)\n   sets this to disabled.\n*------------------------------------------------------------------------------------------ */\n\n%global _tsdg_run_trigger;\n\n%if %sysevalf(%superq(_tsdg_run_trigger)=, boolean)  %then %do;\n\t%put NOTE: Trigger macro variable _tsdg_run_trigger does not exist. Creating it now.;\n    %let _tsdg_run_trigger=1;\n%end;\n\n\n/*--------------------------------------------------------------------------------------*\n   Macro variables to hold the selected interval and nominal input variables.\n*---------------------------------------------------------------------------------------*/\n\n%let blankSeparatedIntervalVars = %_flw_get_column_list(_flw_prefix=intervalVars);\n%let blankSeparatedNominalVars = %_flw_get_column_list(_flw_prefix=nominalVars);\n\n\n/*--------------------------------------------------------------------------------------*\n   Macro to execute string substitution for \"GPU Devices\" in case the user enables GPU & \n   specifies a GPU device ID. \n\n   Note : For those interested, a little dated but insightful SAS Global Forum paper on \n   the best way to evaluate if a macro variable is blank (as used below), provided here:\n   http://support.sas.com/resources/papers/proceedings09/022-2009.pdf \n*---------------------------------------------------------------------------------------*/\n\n%macro gpu_status_string_substitute;\n   %global deviceArgumentString;\n   %if &gpuEnabled.=0 %then %do;\n      %let deviceArgumentString=;\n   %end;\n   %else %do;\n      %if %sysevalf(%superq(numDevices)=,boolean) %then %do;\n         %let deviceArgumentString=;\n      %end;\n      %else %do;\n         data _null_;\n            call symput(\"deviceArgumentString\",\",device=&numDevices.\");\n         run;\n      %end;\n   %end;\n\n%mend gpu_status_string_substitute;\n\n/* -----------------------------------------------------------------------------------------* \n   This macro creates a global macro variable called _usr_nameCaslib\n   that contains the caslib name (aka. caslib-reference-name) associated with the libname \n   and assumes that the libname is using the CAS engine.\n\n   As sysvalue has a length of 1024 chars, we use the trimmed option in proc sql\n   to remove leading and trailing blanks in the caslib name.\n*------------------------------------------------------------------------------------------ */\n\n%macro _usr_getNameCaslib(_usr_LibrefUsingCasEngine); \n\n   %global _usr_nameCaslib;\n   %let _usr_nameCaslib=;\n\n   proc sql noprint;\n      select sysvalue into :_usr_nameCaslib trimmed from dictionary.libnames\n      where libname = upcase(\"&_usr_LibrefUsingCasEngine.\") and upcase(sysname)=\"CASLIB\";\n   quit;\n\n%mend _usr_getNameCaslib;\n\n\n/* -----------------------------------------------------------------------------------------* \n   This macro loops through all selected input interval variables and creates centroid tables\n   for them.\n*------------------------------------------------------------------------------------------ */\n%macro _tsdg_create_centroids_table;\n\n\tdata centroids;\n\t\tset _null_;\n\trun;\n\n     /* Loop over all variables that need centroids generation */\n     %do i=1 %to &intervalVars_count.;\n\n         %let name&i = %scan(%nrquote(&blankSeparatedIntervalVars.), &i., %str(\" \"));\n         %put NOTE: Running centroid table creation for variable &&name&i.;\n\n         /* Call the GMM action to cluster each variable */\n         proc cas ;\n         /* -----------------------------------------------------------------------------------------* \n            Obtain values from UI and store inside variables\n         *------------------------------------------------------------------------------------------ */\n             input_table_name=symget(\"inputtable1_name_base\");\n             input_table_lib =symget(\"inputCaslib\");\n             print(input_table_lib);\n             nonParametricBayes.gmm result=R/\n                 table       = {name=input_table_name, caslib=input_table_lib},\n                 inputs      = ${&&name&i.},  \n                 seed        = 1234567890,\n                 maxClusters = 10,\n                 alpha       = 1,\n                 infer       = {method=\"VB\",\n                                maxVbIter =30,\n                                covariance=\"diagonal\",\n                                threshold=0.01},\n                 output      = {casOut={name='_tsdg_score',caslib=input_table_lib, replace=true},\n                                copyVars=${&blankSeparatedIntervalVars.}},\n                 display     = {names={ \"ClusterInfo\"}}\n                ;\n             run;\n             saveresult R.ClusterInfo replace dataset=work.weights&i;\n         run;\n         quit;\n\n\n         data  weights&i;\n             format varname $100.;\n             informat varname $100.;\n             set  weights&i(rename=(&&name&i.._Mean=Mean\n                                    &&name&i.._Variance=Var));\n\t\t     varname = \"&&name&i\";\n             std = sqrt(Var);\n             drop Var;\n         run;\n\n  \n         data centroids;\n             set weights&i. centroids ;\n         run;\n\n     %end;\n %mend _tsdg_create_centroids_table;\n\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE MACRO \n*------------------------------------------------------------------------------------------*/\n\n%macro main_execution_code;\n\n/*-----------------------------------------------------------------------------------------*\n   Run the libref check macro in order to obtain the correct Caslib for desired tables.\n*------------------------------------------------------------------------------------------*/\n      %global inputCaslib;\n      %global outputCaslib;\n      %global modelCaslib;\n\n      %_usr_getNameCaslib(&inputtable1_lib.);\n      %let inputCaslib=&_usr_nameCaslib.;\n      %put NOTE: &inputCaslib. is the input caslib.;\n      %let _usr_nameCaslib=;\n\n      %_usr_getNameCaslib(&outputtable1_lib.);\n      %let outputCaslib=&_usr_nameCaslib.;\n      %let _usr_nameCaslib=;\n\n      %_usr_getNameCaslib(&outputtable2_lib.);\n      %let modelCaslib=&_usr_nameCaslib.;\n      %let _usr_nameCaslib=;\n\n\n   /* -----------------------------------------------------------------------------------------* \n      Run the _tsdg_create_centroids_table macro to generate the centroids table.\n   *------------------------------------------------------------------------------------------ */\n   %_tsdg_create_centroids_table;\n\n   data casuser.centroids;\n      set centroids;\n   run;\n\n   /* -----------------------------------------------------------------------------------------* \n      Execute the gpu_status_string_substitute macro.\n   *------------------------------------------------------------------------------------------ */\n   %gpu_status_string_substitute;\n\n   proc cas;\n\n      /* -----------------------------------------------------------------------------------------* \n         Obtain values from UI and store inside variables\n      *------------------------------------------------------------------------------------------ */\n      input_table_name =symget(\"inputtable1_name_base\");\n      input_table_lib  =symget(\"inputCaslib\");\n      model_table_name =symget(\"outputtable2_name_base\");\n      model_table_lib  =symget(\"modelCaslib\");\n      output_table_name=symget(\"outputtable1_name_base\");\n      output_table_lib =symget(\"outputCaslib\");\n\n      loadactionset \"generativeAdversarialNet\";   \n      generativeAdversarialNet.tabularGanTrain result = r /\n         table           = {name = input_table_name, caslib=input_table_lib,vars = ${&blankSeparatedIntervalVars. &blankSeparatedNominalVars.}},\n         centroidsTable  = {name = \"CENTROIDS\", caslib=\"CASUSER\"},\n         nominals        = ${&blankSeparatedNominalVars.},\n         gpu             = {useGPU=&gpuEnabled. &deviceArgumentString.}\n         miniBatchSize   = &miniBatchSize.,  \n         optimizerAe     = {method = \"ADAM\", numEpochs = &aeEpochs.},\n         optimizerGan    = {method = \"ADAM\", numEpochs = &ganEpochs.},\n         seed            = 12345,\n         scoreSeed       = 0,\n         numSamples      = &numSamples.,\n         saveState       = {name = model_table_name, caslib=model_table_lib, replace=True},\n         casOut          = {name = output_table_name, caslib=output_table_lib, replace = True};\n      print r;\n\t\n      table.save /\n         table  ={name = model_table_name, caslib=model_table_lib}\n         name   =model_table_name\n         caslib =model_table_lib\n         replace=True\n      ;\n   quit;\n\n\n%mend main_execution_code;\n\n/*-----------------------------------------------------------------------------------------*\n   END OF MACROS\n*------------------------------------------------------------------------------------------*/\n\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE\n   The execution code is controlled by the trigger variable defined in this custom step. This\n   trigger variable is in an \"enabled\" (value of 1) state by default, but in some cases, as \n   dictated by logic, could be set to a \"disabled\" (value of 0) state.\n*------------------------------------------------------------------------------------------*/\n\n\n\n%if &_tsdg_run_trigger. = 1 %then %do;\n   %main_execution_code;\n%end;\n%if &_tsdg_run_trigger. = 0 %then %do;\n   %put NOTE: This step has been disabled.  Nothing to do.;\n%end;\n"},"properties":{},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"param\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Parameters\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section1\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Input parameters\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"inputtable1\",\n\t\t\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\t\t\"label\": \"Input table:\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Connect a SAS Cloud Analytics Services (CAS) table to the input port attached to this step.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"intervalVars\",\n\t\t\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\t\t\"label\": \"Select interval candidate variables:\",\n\t\t\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\t\t\"columntype\": \"n\",\n\t\t\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\t\t\"min\": null,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"table\": \"inputtable1\",\n\t\t\t\t\t\t\t\"include\": null\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"nominalVars\",\n\t\t\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\t\t\"label\": \"Select nominal candidate variables:\",\n\t\t\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\t\t\"min\": null,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"table\": \"inputtable1\",\n\t\t\t\t\t\t\t\"include\": null\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section2\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Output specification\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text1_1\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Attach CAS tables to the two output ports of this step.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"outputtable2\",\n\t\t\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\t\t\"label\": \"Desired model binary name:\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note: the model table gets persisted in the given caslib as a sashdat by default.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"outputtable1\",\n\t\t\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\t\t\"label\": \"Output table:\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"numSamples\",\n\t\t\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide number of samples:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\t\t\"min\": null,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"advanced\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Configuration\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"aeEpochs\",\n\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\"label\": \"Enter # of epochs for the Autoencoder optimizer:\",\n\t\t\t\t\t\"placeholder\": \"1\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\"excludemin\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"ganEpochs\",\n\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\"label\": \"Enter # of epochs for the GAN optimizer:\",\n\t\t\t\t\t\"placeholder\": \"1\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\"excludemin\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"miniBatchSize\",\n\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\"label\": \"Provide minibatch size:\",\n\t\t\t\t\t\"placeholder\": \"60\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\"min\": null,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"gpuEnabled\",\n\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\"label\": \"Enable GPU\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"numDevices\",\n\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\"label\": \"Specify GPU device ID (max 1):\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\"min\": null,\n\t\t\t\t\t\"visible\": \"$gpuEnabled\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"page2\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text_description\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Train a Synthetic Data Generator through Generative Adversarial Networks (GANs)\\n========================================================\\n\\nThis custom step helps you train a model through Generative Adversarial Networks (GANs) using underlying distributions and correlations learnt from an existing dataset.  This step results in a model binary, known as an astore, which can be used in a scoring process.\\n\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_parameters\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Parameters\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"This custom step runs on data loaded to a SAS Cloud Analytics Services (CAS) library (known as a caslib). Ensure you are connected to CAS before running this step.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_input\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Input Parameters\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"input_parameters_text\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. An input dataset referring to an in-memory CAS table, which serves as the training data - connect this to the input port of this step.\\n\\n2. Provide both interval and nominal variables to be used for training the model. \\n\\n3. Provide number of sample observations to generate.\\n\\n4. Advanced tab: Number of epochs for the autoencoder and GAN optimizers, the minibatch size, and whether to use GPUs for training or not.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_config\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Configuration\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"input_parameters_text_1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. Number of epochs for autoencoder optimizer (numeric field, default 1): change as required.\\n\\n2. Number of epochs for the GAN optimizer (numeric field, default 1): change as required\\n\\n3. Minibatch size (default 60): change as required\\n\\n4. Enable GPU (check box, deselected by default): check this option if you wish to use GPUs to train.\\n\\n5. GPU device ID (text field, dependent on GPU enabled): enter a value only if you want to specify a device ID different from the default.  Note that the tabularGanTrain action is set to use a max of 1 GPU.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_output_specs\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Output specification\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"output_parameters_text\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. Attach a table to the output port for Output Data, which contains sample generated observations for review.\\n\\n2. Attach a table to the output port for Desired Model Binary, which will hold the astore table. (Note: the astore is a binary table. Do not attempt to open it within SAS Studio as it won't be readable.)\\n\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_runtimecontrol\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Run-time Control\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"runtimecontrol_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note: Run-time control is optional.  You may choose whether to execute the main code of this step or not, based on upstream conditions set by earlier SAS programs.  This includes nodes run prior to this custom step earlier in a SAS Studio Flow, or a previous program in the same session.\\n\\nRefer this blog (https://communities.sas.com/t5/SAS-Communities-Library/Switch-on-switch-off-run-time-control-of-SAS-Studio-Custom-Steps/ta-p/885526) for more details on the concept.\\n\\nThe following macro variable,\\n\\n_tsdg_run_trigger\\n\\nwill initialize with a value of 1 by default, indicating an \\\"enabled\\\" status and allowing the custom step to run.\\n\\nIf you wish to control execution of this custom step, include code in an upstream SAS program to set this variable to 0.  This \\\"disables\\\" execution of the custom step.\\n\\nTo \\\"disable\\\" this step, run the following code upstream:\\n\\n%global _tsdg_run_trigger;\\n%let _tsdg_run_trigger =0;\\n\\nTo \\\"enable\\\" this step again, run the following (it's assumed that this has already been set as a global variable):\\n\\n%let _tsdg_run_trigger =1;\\n\\nIMPORTANT: Be aware that disabling this step means that none of its main execution code will run, and any  downstream code which was dependent on this code may fail.  Change this setting only if it aligns with the objective of your SAS Studio program.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_documentation\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Documentation\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"documentation_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"1. The generativeAdversarialNet.tabularGanTrain action is documented here : https://documentation.sas.com/?cdcId=pgmsascdc&cdcVersion=default&docsetId=casactml&docsetTarget=cas-generativeadversarialnet-tabulargantrain.htm\\n\\n2. This SAS Communities article: https://communities.sas.com/t5/SAS-Communities-Library/Switch-on-switch-off-run-time-control-of-SAS-Studio-Custom-Steps/ta-p/885526 referred to earlier suggests an approach through which execution of this custom step is controlled during run time.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"change_log_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Version: 2.0  (04NOV2024)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"contact_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Created/contact: \\n\\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com)\\n- Brett Wujek (brett.wujek@sas.com)\\n- Reza Nazari (reza.nazari@sas.com) \\n- Ruiwen Zhang (ruiwen.zhang@sas.com) \\n- Lorne Rothman (lorne.rothman@sas.com)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"inputtable1\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"intervalVars\": [],\n\t\t\"nominalVars\": [],\n\t\t\"outputtable2\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"outputtable1\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"numSamples\": 20,\n\t\t\"aeEpochs\": 1,\n\t\t\"ganEpochs\": 1,\n\t\t\"miniBatchSize\": 60,\n\t\t\"gpuEnabled\": false,\n\t\t\"numDevices\": null\n\t},\n\t\"promptHierarchies\": [],\n\t\"columnExclusions\": [\n\t\t[\n\t\t\t\"nominalVars\",\n\t\t\t\"intervalVars\"\n\t\t]\n\t]\n}","flowMetadata":{"inputPorts":[{"name":"inputtable1","displayName":"inputtable1","minEntries":1,"maxEntries":1,"type":"table"}],"outputPorts":[{"name":"outputtable2","displayName":"outputtable2","minEntries":1,"maxEntries":1,"columnDelta":null,"type":"table"},{"name":"outputtable1","displayName":"outputtable1","minEntries":1,"maxEntries":1,"columnDelta":null,"type":"table"}]}}