{"creationTimeStamp":"2022-12-22T19:24:46.531Z","modifiedTimeStamp":"2022-12-22T19:27:07.896Z","createdBy":"sinsrn","modifiedBy":"sinsrn","name":"CAS - Load Tables from Folders in Filesystem.step","displayName":"CAS - Load Tables from Folders in Filesystem.step","localDisplayName":"CAS - Load Tables from Folders in Filesystem.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/d0540206-f35b-4117-b0f1-2d2fbbe0f236","uri":"/dataFlows/steps/d0540206-f35b-4117-b0f1-2d2fbbe0f236","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/d0540206-f35b-4117-b0f1-2d2fbbe0f236","uri":"/dataFlows/steps/d0540206-f35b-4117-b0f1-2d2fbbe0f236","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/d0540206-f35b-4117-b0f1-2d2fbbe0f236","uri":"/dataFlows/steps/d0540206-f35b-4117-b0f1-2d2fbbe0f236","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/d0540206-f35b-4117-b0f1-2d2fbbe0f236","uri":"/dataFlows/steps/d0540206-f35b-4117-b0f1-2d2fbbe0f236"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/d0540206-f35b-4117-b0f1-2d2fbbe0f236","uri":"/dataFlows/steps/d0540206-f35b-4117-b0f1-2d2fbbe0f236","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/d0540206-f35b-4117-b0f1-2d2fbbe0f236","uri":"/dataFlows/steps/d0540206-f35b-4117-b0f1-2d2fbbe0f236","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[],"outputPorts":[]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page1\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Parameters\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"CAS - Load Tables from Folders in Filesystem\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section1\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Source file specifications\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"folderName\",\n\t\t\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\t\t\"label\": \"Select a folder on SAS Server containing input data:\",\n\t\t\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text3\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note: If this path is already assigned to a Caslib, you might reload some files already in CAS. Continue with this step only if you want such behaviour.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"fileType\",\n\t\t\t\t\t\t\t\"type\": \"radiogroup\",\n\t\t\t\t\t\t\t\"label\": \"Select file type (extension):\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"ALL\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"csv\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"jmp\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"sashdat\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"sav\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"txt\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"xls\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"fileNamePattern\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Filename pattern (leave blank if not needed):\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section2\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Target specifications\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"outputCaslib\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide name of target (global) caslib:\",\n\t\t\t\t\t\t\t\"placeholder\": \"Default is PUBLIC\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"promoteFlag\",\n\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\"label\": \"Promote all tables\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"page2\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Load Tables from Folders in Filesystem\\n\\nThe \\\"CAS - Load Tables from Folders in Filesystem\\\" custom step loads all files of a specified pattern located within a folder to in-memory Cloud Analytics Services (CAS) tables. Every file within the folder is loaded to a separate table with the same name (without the suffix).\\n\\nThis custom step is useful for applications where the user wishes to load multiple files to CAS in one go.  A specific use-case is when you wish to access source code and data located within a Git repository.  After cloning the repo using Git Integration, you can then run this step to load all data files to CAS tables.\\n\\nThis Custom Step requires an active connection to CAS in order to run successfully.\\n\\nInput parameters: \\n\\nSource File Specifications:\\n1. Select the folder containing your input data on the filesystem. Note that if your folder path is already assigned to a caslib, the same caslib will be used as the input caslib from which to load data.  Files which have already been loaded to CAS may get reloaded.  Proceed with the step only if this is what you desire, otherwise simply execute a loadTable action referring to the Caslib.\\n2. As an option, you may choose to filter for a specific file extension.  A future enhancement will allow you to select multiple extensions.  For now, select either one extension, or ALL.\\n3. As another option, you may like to provide a wildcard pattern which only loads files whose names conform to the said pattern. Feel free to leave this blank if not required. Note that the wildcard pattern follows the syntax provided in the fileInfo & tableInfo action documentation (links provided below).\\n\\nTarget Specifications:\\n1. Provide an output Caslib name (PUBLIC is the default).\\n2. The default behaviour is to promote the CAS table upon load.  Uncheck this box if you wish to use this table only within the SAS Studio session (also known as session scope).\\n\\nThe number of output datasets may vary, depending on the number of files you have in your selected folder. To check the status of the load, you may either refer to the Libraries tab in SAS Studio (left menu bar) or you may like to check using Manage Data / Prepare Data in the main menu (if you have chosen to promote).  You may also choose to select promoted output tables for visualization using SAS Visual Analytics.\\n\\nRefer SAS documentation for information on the actions used in this custom step.\\n\\nfileInfo : https://documentation.sas.com/?cdcId=sasstudiocdc&cdcVersion=default&activeCdc=pgmsascdc&docsetId=caspg&docsetTarget=cas-table-fileinfo.htm\\n\\nloadTable : https://documentation.sas.com/?cdcId=sasstudiocdc&cdcVersion=default&activeCdc=pgmsascdc&docsetId=caspg&docsetTarget=cas-table-loadtable.htm\\n\\nWildcard patterns : https://documentation.sas.com/?cdcId=sasstudiocdc&cdcVersion=default&activeCdc=pgmsascdc&docsetId=caspg&docsetTarget=p1xt9526uq5etwn1vmnk8koh0k6y.htm#n0y2zj2e81x5y5n1onqq4tibcn5h\\n\\nCreated / contact : \\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com)\\n- Wilbram Hazeberger (wilbram.hazeberger@sas.com)\\n\\nVersion : 1.1.   (21DEC2022)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"folderName\": \"\",\n\t\t\"fileType\": {\n\t\t\t\"value\": \"ALL\"\n\t\t},\n\t\t\"fileNamePattern\": \"\",\n\t\t\"outputCaslib\": \"PUBLIC\",\n\t\t\"promoteFlag\": true\n\t}\n}","templates":{"SAS":"proc cas;\n\n/* Retrieve all relevant macro variable values that represent selections in the UI */ \n    folderName=symget(\"folderName\");\n    folderPath=scan(folderName,2,\":\",\"MO\");\n    fileType=symget(\"fileType\");\n    fileNamePattern=symget(\"fileNamePattern\");\n    outputCaslib=symget(\"outputCaslib\");\n    promoteFlag=symget(\"promoteFlag\");\n    \n    if fileType=\"ALL\" then fileType='%';\n    /* FUTURE PLACEHOLDER: Accommodate multiple filetypes (i.e. between 1 single file type and ALL) */\n    \n\n    /* START - Define helper functions */\n    \n    function doesTableExist(casLib, casTable);\n        table.tableExists result=tableExistsResultTable status=rc / caslib=casLib, table=casTable;\n        tableExists = dictionary(tableExistsResultTable, \"exists\");\n        return tableExists;\n    end; \n\n    function whichCaslibUsesThisPath(folderPath);\n        table.caslibInfo result=result /\n        showHidden=TRUE,\n        srcType=\"ALL\",\n        verbose=TRUE\n        ;\n\n    /* We check if the given path is already part of a list of caslibs,*/;\n    /* and therefore already assigned                                   */;\n    /* Note that the folder path may sometimes have a \"/\" appended ,   */;\n    /* therefore checking for both cases.                              */;\n\n        if dim(result.CasLibInfo.where(Path=folderPath or Path=folderPath||\"/\"))>0 then do;\n\n    /*  If the path already exists within a caslib, we assign the caslib name to the caslibname variable. */;\n\n            caslibName=result.CasLibInfo.where(Path=folderPath or Path=folderPath||\"/\")[1][\"Name\"];\n            return caslibName; \n        end; \n\n    /*  Otherwise, we return a false to the calling code indicating that they could make a decision for the new path */;\n\n         else do;\n            return(false);\n        end;\n    end;\n    \n    function dropTableIfExists(casLib,casTable);\n       tableExists = doesTableExist(casLib, casTable);\n       if tableExists != 0 then do;\n          print \"Dropping table: \"||casLib||\".\"||casTable;\n          table.dropTable status=rc / caslib=casLib, table=casTable, quiet=True;\n          if rc.statusCode != 0 then do;\n             exit();\n          end;\n       end;\n    end;\n    \n    function isServerFolder(folderName);\n       folderType = scan(folderName,1,\":\");\n       /* In CASL checks for boolean values are case-insensitive */\n       /* so True/TRUE/true/tRuE are equivalent                  */\n       select(upcase(folderType));\n          when('SASSERVER') return(true); \n          otherwise return(false);\n       end;\n    end;\n    \n    function loadTableFromFileName(fileName,inputCaslib,OutputCaslib);\n       /* Function parameters:                                                                                      */\n       /*    - fileName     : name of a file including file extension, without directory info                      */\n       /*    - inputCaslib  : name of caslib containing the file                                                    */\n       /*    - outputCaslib : name of target caslib where file will be loaded into                                  */\n    \n       tableName=scan(fileName,1,\".\",\"MO\"); \n       /* Warning: When not specifying the file extension during load, CAS will apply a preference and might not    */\n       /*          load the file with the extension you intended. Eg. sashdat before csv/txt/...                    */\n    \n       if promoteFlag='0' then do;\n          /* Load the table without promote                                                                         */\n    \n          /* As the table will not be promoted, simply use replace=True to overwrite existing session table         */\n          /* Using result= to suppress extra lines in SAS log                                                       */\n          /* Using path= and specifying file name including extension, incase file exist mulitple times with        */\n          /*   different extensions. This to ensure that the intended file extension is used.                       */ \n          table.loadTable result=resultTable status=rc / \n             caslib=inputCaslib,\n             path=fileName,\n             casOut={caslib=outputCaslib, replace=True}\n             ;\n       end;\n       else do;\n          /* Load and promote the table.                                                                            */\n    \n          /* As the table needs to be promoted, both session and global table need to be removed (if they exist).   */\n          /* Therefore dropTableIfExist is called twice:                                                            */\n          /*  - If both session and global table exist, the first call will remove the session table,               */\n          /*      the second call will remote the global (promoted) table                                           */\n          /*  - If only session or global table exist, the first call will delete it, the second call is a no-op    */\n          /*  - If neither session or global table exist, both calls are no-op                                      */\n          dropTableIfExists(outputCaslib,tableName);\n          dropTableIfExists(outputCaslib,tableName);\n    \n          /* Using result= to suppress extra lines in SAS log                                                       */\n          table.loadTable result=resultTable status=rc / /* Using result= to suppress extra lines in output */\n             caslib=inputCaslib,\n             path=fileName,\n             casout={caslib=outputCaslib, promote=True}\n          ;\n       end;\n    \n       return(rc.statusCode);\n    \n    end;\n    \n    /* END - Define helper functions */\n    \n    /* We will assume the user has selected a directory that is not mapped by an existing caslib.   */\n    /* Therefore, a caslib will be created temporarily, to be used by table.loadTable and the       */\n    /* caslib will be deleted after all requested files have been processed.                        */\n    \n    if isServerFolder(folderName)!=true then do;\n       print \"Folder: \"!!folderName!!\"is not a SAS Server folder\";\n       print \"Exiting now ...\";\n       /* This exists current run-group in proc cas, subsequent run-groups are stil going to be run */\n       exit;\n    end; else print \"Valid folder\";\n\n/*     We will check if a path (and a corresponding caslib) already exists.  */\n    /* If it exists, we don't create the caslib;  Otherwise, we create the temporary caslib */\n    tmpSourceCaslib = whichCaslibUsesThisPath(folderPath);    \n\n    if tmpSourceCaslib then do;\n        mainLoadOfFiles(tmpSourceCaslib);\n    end;\n    else do;\n        tmpSourceCaslib=\"LoadCASFSTemp\";\n        table.addCaslib result=result /\n        name=tmpSourceCaslib,\n        dataSource={srcType=\"path\"},\n        path=folderPath\n        ;\n        \n        mainLoadOfFiles(tmpSourceCaslib);\n\n        table.dropCaslib /\n        caslib=tmpSourceCaslib \n        ;\n    end;\n\n/* Hoisting Main Processing Function here */\n\n    function mainLoadOfFiles(tmpSourceCaslib);\n        /* FUTURE PLACEHOLDER: Need better explanation of pattern definitions in UI                                                               */\n        /* Patterns are tricky as table.fileInfo action has its own syntax for wildcard characters                                                */\n        /* Doc URL: https://go.documentation.sas.com/doc/en/pgmsascdc/default/caspg/p1xt9526uq5etwn1vmnk8koh0k6y.htm#n0y2zj2e81x5y5n1onqq4tibcn5h */\n              \n        table.fileInfo result = result /\n           caslib=tmpSourceCaslib,\n           path='%'||fileNamePattern||'%'||fileType,\n           wildsensitive=false /* Ignore casing specified in pattern */\n        ;\n    \n        /* FUTURE PLACEHOLDER - Idea: Perhaps create an output table that lists all the files that were found and their load status */\n        nFiles = dim(result.FileInfo);\n        do i = 1 to nFiles; \n           print \"Loading file \"!!i!!\"of \"!!nFiles!!\": \"!!result.FileInfo[i,\"Name\"];\n           fileStatus=loadTableFromFileName(result.FileInfo[i,\"Name\"], tmpSourceCaslib, outputCaslib);\n           print \"Return Code: \"!!fileStatus;\n           print \" \";\n        end;\n    end;    \n    \n    \n    \nquit;\n"}}