{"creationTimeStamp":"2024-04-12T20:05:18.327Z","modifiedTimeStamp":"2024-12-03T18:19:59.821Z","createdBy":"roblan","modifiedBy":"roblan","name":"CV - ESP Zip Creation.step","displayName":"CV - ESP Zip Creation.step","localDisplayName":"CV - ESP Zip Creation.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/3d659734-e2e1-48f3-934f-a8372fa73c92","uri":"/dataFlows/steps/3d659734-e2e1-48f3-934f-a8372fa73c92","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/3d659734-e2e1-48f3-934f-a8372fa73c92","uri":"/dataFlows/steps/3d659734-e2e1-48f3-934f-a8372fa73c92","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/3d659734-e2e1-48f3-934f-a8372fa73c92","uri":"/dataFlows/steps/3d659734-e2e1-48f3-934f-a8372fa73c92","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/3d659734-e2e1-48f3-934f-a8372fa73c92","uri":"/dataFlows/steps/3d659734-e2e1-48f3-934f-a8372fa73c92"},{"method":"POST","rel":"copy","href":"/dataFlows/steps/3d659734-e2e1-48f3-934f-a8372fa73c92/copy","uri":"/dataFlows/steps/3d659734-e2e1-48f3-934f-a8372fa73c92/copy","responseType":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/3d659734-e2e1-48f3-934f-a8372fa73c92","uri":"/dataFlows/steps/3d659734-e2e1-48f3-934f-a8372fa73c92","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/3d659734-e2e1-48f3-934f-a8372fa73c92","uri":"/dataFlows/steps/3d659734-e2e1-48f3-934f-a8372fa73c92","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[{"name":"tbleforESP","displayName":"tbleforESP","localDisplayName":"tbleforESP","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table"}],"outputPorts":[]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page1\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Parameters \",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"tbleforESP\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Input table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Select a location to store the ESP zip files:\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"ESP_zip_location\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Name of zip file:\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"ESPzipfilename\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section1\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Additional Options\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text4\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Would you like to include a video file in the ESP package for testing?\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"includevidfile_\",\n\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"yes\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Yes\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"no\",\n\t\t\t\t\t\t\t\t\t\"label\": \"No\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_usrvidfile_\",\n\t\t\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\t\t\"label\": \"Select video file:\",\n\t\t\t\t\t\t\t\"pathtype\": \"file\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$includevidfile_\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"yes\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"page2\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text3\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"CV - Create ESP Zip\\n===================\\n\\nThis custom step creates a zip file to automate the creation of ESP projects. The zip includes the following three folders and corresponding files:\\n\\n1. An \\\"analytics\\\" folder that contains the model ASTORE.\\n2. A \\\"model\\\" folder containing the XML file defines the ESP project.\\n3. An optional \\\"test_files\\\" folder that includes a test video.\\n\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section2\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Parameter Details\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text5\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Select a location to store the ESP zip files (Required): provide a valid path to a folder located in the SAS Server Where the zip file will be stored.\\n\\nName of zip file (Required): provide the name of the zip file.\\n\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section3\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Additional Options Details\",\n\t\t\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text6\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"Would you like to include a video file in the ESP package for testing (Optional)? users can optionally include a video file for testing in ESP. The user will need to select a video file if “yes” is answered from the drop-down list. \",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text7\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Created / contact : \\n- Robert Blanchard (robert.blanchard@sas.com)\\n\\n\\nVersion: 1.0.   (03DEC2024)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"tbleforESP\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"ESP_zip_location\": \"\",\n\t\t\"ESPzipfilename\": \"\",\n\t\t\"includevidfile_\": {\n\t\t\t\"value\": \"no\",\n\t\t\t\"label\": \"No\"\n\t\t},\n\t\t\"_usrvidfile_\": \"\"\n\t}\n}","templates":{"SAS":"\n/*-----------------------------------------------------------------------------------------*\nMacro to check if a given libref belongs to a SAS or CAS engine.\n/*------------------------------------------------------------------------------------------*/\n%if \"%upcase(&tbleforESP_engine)\" ne \"CAS\" %then %do;\n\n\tdata _null_;\n\t\tputlog \"ERROR: The selected table is not a CAS table.\";\n\t\tputlog \"ERROR: Please select a library that points to a caslib.\";\n\t\tabort 42;\n\trun;\n\n%end;\n%else %do;\n\t%let _tm_nameCaslib=%sysfunc(getlcaslib(&tbleforESP_lib));\n\t%put CASLIB name: &tbleforESP_lib;\n%end;\n\n\n/*-----------------------------------------------------------------------------------------*\nMacro to check if a the required columns exist in the data.\n/*------------------------------------------------------------------------------------------*/\n%macro columnExists(datasetName, columnName);\n\t%* Assumes that datasetName exists;\n\t%* Returns 1 when columnName exists, otherwise 0;\n\t%local dsid colnum rcColumnExists;\n\t%let dsid=%sysfunc(open(&datasetName));\n\t%let colnum=%sysfunc(varnum(&dsid,&columnName));\n\t%let rc=%sysfunc(close(&dsid));\n\n\t%if &colnum>0 %then %let rcColumnExists=1;\n     \t         %else %let rcColumnExists=0;\n\t&rcColumnExists;\n%mend columnExists;\n\n\n\ndata _null_;\n\tcall symput(\"Inser_caslibESP\", scan(%cmpres(\"&tbleforESP.\"), 1, \".\", \"MO\"));\n\tcall symput(\"Inser_tbleESP\", scan(%cmpres(\"&tbleforESP.\"), 2, \".\", \"MO\"));\nrun;\n\ndata _null_;\n\tx=\"&ESP_zip_location\";\n\ty=find(x, ':');\n\tz=substr(x, (find(x, ':')+1));\n\tcall symputx(\"ESPziplocation\", z);\nrun;\n\ndata _null_;\n\tx=\"&_usrvidfile_\";\n\ty=find(x, ':');\n\tz=substr(x, (find(x, ':')+1));\n\tcall symputx(\"_uservidfile_\", z);\nrun;\n\ndata _null_;\n\tthevidtestfile2=scan(\"&_usrvidfile_\", -1, '/');\n\tcall symputx(\"replacevideonamehere\", thevidtestfile2);\nrun;\n\n/* check if the user is trying to save or reference files in the SAS content, which is not allowed */\ndata _null_;\n\tlocation=scan(\"&ESP_zip_location.\", 1, ':', 'MO');\n\n\tif location eq 'sascontent' then do;\n\t\tputlog \"ERROR: Please ensure that the directory containing images is located in SAS Server not in SAS Content\";\n\t\tabort 42;\n\tend;\nrun;\n\ndata _null_;\n\tlocation=scan(\"&_usrvidfile_.\", 1, ':', 'MO');\n\n\tif location eq 'sascontent' then do;\n\t\tputlog \"ERROR: Please ensure that the directory containing images is located in SAS Server not in SAS Content\";\n\t\tabort 42;\n\tend;\nrun;\n\n\n\n\n\n%put Does column type exist?: %columnExists(&tbleforESP_lib..&tbleforESP_name,type);\n%put Does column name exist?: %columnExists(&tbleforESP_lib..&tbleforESP_name,name);\n\n\ndata _null_;\n\tset &tbleforESP_lib..&tbleforESP_name;\n\tretain \tfound_model_folder \n\t\t\tfound_model_name \n\t\t\tfound_model_type\n\t\t\tfound_image_height\n\t\t\tfound_image_width\n\t\t\tfound_number_of_objects;\n\n\tif type=\"model_folder\" then do;\n\t\tcall symputx(\"mac_project_path\", name);\n\t\tfound_model_folder=1;\n\tend;\n\n\tif type=\"model_name\" then do;\n\t\tcall symputx(\"mac_model_name\", name);\n\t\tfound_model_name=1; \n\tend;\n\n\tif type=\"model_type\" then do;\n\t\tcall symputx(\"mac_model_type\", name);\n\t\tfound_model_type=1;\n\tend;\n\n\tif type=\"image_height\" then do;\n\t\tcall symputx(%cmpres(\"mac_image_height\"), name);\n\t\tfound_image_height=1;\n\tend;\n\n\tif type=\"image_width\" then do;\n\t\tcall symputx(%cmpres(\"mac_image_width\"), name);\n\t\tfound_image_width=1;\n\tend;\n\n\tif type=\"number_of_objects\" then do;\n\t\tcall symputx(\"mac_num_objs\", name);\n\t\tfound_number_of_objects=1;\n\tend;\nrun;\n\n%macro mac4testvid;\n\t%global _incdtestvidfile_;\n\t%let _incdtestvidfile_=;\n\n\t%if &includevidfile_=yes %then %do;\n\t\t%let _incdtestvidfile_=ods package(ESPOutput) add file=\"&_uservidfile_\" \n\t\t\tpath=\"test_files\";\n\t\t;\n\t%end;\n%mend;\n\n%mac4testvid;\n\n/* Create a the following XML file in the specified location using the DATA step */\nfilename xml_cl \"&ESPziplocation./model.xml\";\n\n/* Number of objects to created */\n/* %let numObjectsToCreate = &mac_num_objs; */\n/* Create the XML file robertclean1.xml */\ndata _NULL_;\n\t/* Read in the datalines text specified under datalines */\n\tinfile datalines truncover;\n\n\t/* Column to store the string for each row from the datalines */\n\tinput row_string $500.;\n\n\t/*<-------Modify length of column based on your needs */\n\t/* File to create from above */\n\tfile xml_cl;\n\n\t/*********************************************************************/\n\t/*Stuff to change as the DATA step loops over each line in datalines */\n\t/*********************************************************************/\n\t/* Change random thing for that row */\n\tif find(row_string, '_renamemodel_')>1 then do;\n\t\trow_string=trim(left(TRANSTRN(row_string, '_renamemodel_', \n\t\t\t\"&mac_model_name\")));\n\t\trow_string=trim(left(row_string));\n\tend;\n\n\tif find(row_string, '_renamemodeltype_')>1 then \n\t\trow_string=trim(left(TRANSTRN(trim(left(row_string)), '_renamemodeltype_', \n\t\t\"&mac_model_type\")));\n\n\tif find(row_string, '_recodeimgheight_')>1 then do;\n\t\trow_string=trim(left(TRANSTRN(trim(left(row_string)), '_recodeimgheight_', \n\t\t\t\"&mac_image_height\")));\n\t\trow_string=trim(left(row_string));\n\tend;\n\n\tif find(row_string, '_recodeimgwidth_')>1 then \n\t\trow_string=trim(left(TRANSTRN(trim(left(row_string)), '_recodeimgwidth_', \n\t\t\"&mac_image_width\")));\n\n\tif find(row_string, '_video_test_file_')>1 then do;\n\t\trow_string=trim(left(TRANSTRN(row_string, '_video_test_file_', \n\t\t\t\"&replacevideonamehere\")));\n\t\trow_string=trim(left(row_string));\n\tend;\n\n\t/* Create n number of objects in xml file - Use the last default Object0_height value to start loop */\n\tif row_string='<field name=\"_Object0_height\" type=\"double\"/>' then do;\n\n\t\t/* Write the 0 height row out to the xml file */\n\t\tput row_string;\n\n\t\t/*Create new objects for XML file based on amount specified */\n\t\ti=1;\n\n\t\tdo while(i<&mac_num_objs);\n\n\t\t\t/* Make loop number a character to replace N value for each object */\n\t\t\tmakeNumericValueCharacter=strip(put(i, 8.));\n\n\t\t\t/* Create the following columns for N object value */\n\t\t\t_ObjectN_=tranwrd('<field name=\"_ObjectN_\" type=\"string\"/>', 'N', \n\t\t\t\tstrip(makeNumericValueCharacter));\n\t\t\t_P_ObjectN_=tranwrd('<field name=\"_P_ObjectN_\" type=\"double\"/>', 'N', \n\t\t\t\tstrip(makeNumericValueCharacter));\n\t\t\t_ObjectN_x=tranwrd('<field name=\"_ObjectN_x\" type=\"double\"/>', 'N', \n\t\t\t\tstrip(makeNumericValueCharacter));\n\t\t\t_ObjectN_y=tranwrd('<field name=\"_ObjectN_y\" type=\"double\"/>', 'N', \n\t\t\t\tstrip(makeNumericValueCharacter));\n\t\t\t_ObjectN_width=tranwrd('<field name=\"_ObjectN_width\" type=\"double\"/>', 'N', \n\t\t\t\tstrip(makeNumericValueCharacter));\n\t\t\t_ObjectN_height=tranwrd('<field name=\"_ObjectN_height\" type=\"double\"/>', \n\t\t\t\t'N', strip(makeNumericValueCharacter));\n\n\t\t\t/* Write values out to XML file */\n\t\t\tput _ObjectN_;\n\t\t\tput _P_ObjectN_;\n\t\t\tput _ObjectN_x;\n\t\t\tput _ObjectN_y;\n\t\t\tput _ObjectN_width;\n\t\t\tput _ObjectN_height;\n\t\t\ti+1;\n\n\t\t\t/* Continue this loop for n objects */\n\t\tend;\n\tend;\n\telse do;\n\t\tput row_string;\n\n\t\t/* Write the row of data to the new file in the file statement instead of loop*/\n\tend;\n\n\t/* XML file pasted text below under datalines */\n\tdatalines;\n<project heartbeat-interval=\"1\" index=\"pi_EMPTY\" name=\"project_package_astore\" pubsub=\"auto\" threads=\"4\">\n  <!--As best practice the project name should include the model, if different from zip file name the zip name prevail-->\n  <metadata>\n    <meta id=\"studioUploadedBy\">appadmin</meta>\n    <meta id=\"studioUploaded\">1698665688966</meta>\n    <meta id=\"studioModifiedBy\">appadmin</meta>\n    <meta id=\"studioModified\">1699006255529</meta>\n    <meta id=\"layout\">{\"cq1\":{\"w_counter\":{\"x\":50,\"y\":420},\"w_model_reader\":{\"x\":330,\"y\":420},\"w_resize\":{\"x\":190,\"y\":175},\"w_score\":{\"x\":190,\"y\":295},\"w_source\":{\"x\":190,\"y\":50}}}</meta>\n  </metadata>\n  <properties>\n    <!--change depending on model-->\n<property name=\"MODEL_NAME\"><![CDATA[_renamemodel_._renamemodeltype_]]></property>\n<property name=\"SCORE_IMAGE_WIDTH\"><![CDATA[_recodeimgwidth_]]></property>\n<property name=\"SCORE_IMAGE_HEIGHT\"><![CDATA[_recodeimgheight_]]></property>\n    <property name=\"SCORE_IMAGE_RESIZE_TYPE\"><![CDATA[basic]]></property><!--basic or letterbox-->\n    <property name=\"TEST_VIDEO_FILE\"><![CDATA[_video_test_file_]]></property>\n    <!-- end of change depending on model-->\n  </properties>\n  <contqueries>\n    <contquery name=\"cq1\">\n      <windows>\n        <window-source insert-only=\"true\" name=\"w_source\">\n          <schema>\n            <fields>\n              <field key=\"true\" name=\"id\" type=\"int64\"/>\n              <field name=\"_image_\" type=\"blob\"/>\n            </fields>\n          </schema>\n          <connectors>\n            <connector class=\"videocap\" name=\"pub_video_file\">\n              <properties>\n                <property name=\"type\"><![CDATA[pub]]></property>\n                <property name=\"filename\"><![CDATA[@ESP_PROJECT_HOME@/test_files/@TEST_VIDEO_FILE@]]></property>\n                <property name=\"publishformat\"><![CDATA[wide]]></property>\n                <property name=\"publishrate\"><![CDATA[30]]></property>\n              </properties>\n            </connector>\n          </connectors>\n        </window-source>\n        <window-calculate algorithm=\"ImageProcessing\" name=\"w_resize\">\n          <schema>\n            <fields>\n              <field key=\"true\" name=\"id\" type=\"int64\"/>\n              <field name=\"_image_\" type=\"blob\"/>\n              <field name=\"_resized_image_\" type=\"blob\"/>\n            </fields>\n          </schema>\n          <parameters>\n            <properties>\n              <property name=\"function\"><![CDATA[resize]]></property>\n              <property name=\"coordType\"><![CDATA[RECT]]></property>\n              <property name=\"preFlip\"><![CDATA[-1000]]></property>\n              <property name=\"x\"><![CDATA[0]]></property>\n              <property name=\"y\"><![CDATA[0]]></property>\n              <property name=\"xMin\"><![CDATA[0]]></property>\n              <property name=\"yMin\"><![CDATA[0]]></property>\n              <property name=\"xMax\"><![CDATA[0]]></property>\n              <property name=\"yMax\"><![CDATA[0]]></property>\n              <property name=\"width\"><![CDATA[@SCORE_IMAGE_WIDTH@]]></property>\n              <property name=\"height\"><![CDATA[@SCORE_IMAGE_HEIGHT@]]></property>\n              <property name=\"outputWidth\"><![CDATA[0]]></property>\n              <property name=\"outputHeight\"><![CDATA[0]]></property>\n              <property name=\"outputEncoding\"><![CDATA[jpg]]></property>\n              <property name=\"alpha\"><![CDATA[0]]></property>\n              <property name=\"beta\"><![CDATA[0]]></property>\n              <property name=\"delta\"><![CDATA[0]]></property>\n              <property name=\"theta\"><![CDATA[0]]></property>\n              <property name=\"value\"><![CDATA[0]]></property>\n              <property name=\"minValue\"><![CDATA[0]]></property>\n              <property name=\"maxValue\"><![CDATA[0]]></property>\n              <property name=\"type\"><![CDATA[0]]></property>\n              <property name=\"flag1\"><![CDATA[0]]></property>\n              <property name=\"flag2\"><![CDATA[0]]></property>\n              <property name=\"flag3\"><![CDATA[0]]></property>\n              <property name=\"flag4\"><![CDATA[0]]></property>\n              <property name=\"flag5\"><![CDATA[0]]></property>\n              <property name=\"scale\"><![CDATA[0]]></property>\n              <property name=\"resizeType\"><![CDATA[@SCORE_IMAGE_RESIZE_TYPE@]]></property>\n              <property name=\"interpolation\"><![CDATA[linear]]></property>\n              <property name=\"padding\"><![CDATA[constant]]></property>\n              <property name=\"b\"><![CDATA[0]]></property>\n              <property name=\"g\"><![CDATA[0]]></property>\n              <property name=\"r\"><![CDATA[0]]></property>\n              <property name=\"smoothType\"><![CDATA[Gaussian]]></property>\n              <property name=\"normalizeType\"><![CDATA[zero_one]]></property>\n              <property name=\"kernelHeight\"><![CDATA[3]]></property>\n              <property name=\"kernelWidth\"><![CDATA[3]]></property>\n              <property name=\"padType\"><![CDATA[size_divisible]]></property>\n              <property name=\"sizeDivisor\"><![CDATA[8]]></property>\n              <property name=\"cropType\"><![CDATA[basic]]></property>\n            </properties>\n          </parameters>\n          <input-map>\n            <properties>\n              <property name=\"imageInput\"><![CDATA[_image_]]></property>\n            </properties>\n          </input-map>\n          <output-map>\n            <properties>\n              <property name=\"imageOutput\"><![CDATA[_resized_image_]]></property>\n            </properties>\n          </output-map>\n        </window-calculate>\n        <window-score name=\"w_score\">\n          <schema>\n            <fields>\n              <field key=\"true\" name=\"id\" type=\"int64\"/>\n              <field name=\"_image_\" type=\"blob\"/>\n              <field name=\"_resized_image_\" type=\"blob\"/>\n<!--Below you need to specify the output fields of the Astore. Note that ESP uses different variable types-->\n<field name=\"_nObjects_\" type=\"double\"/>              \n<field name=\"_Object0_\" type=\"string\"/>              \n<field name=\"_P_Object0_\" type=\"double\"/>              \n<field name=\"_Object0_x\" type=\"double\"/>             \n<field name=\"_Object0_y\" type=\"double\"/>              \n<field name=\"_Object0_width\" type=\"double\"/>              \n<field name=\"_Object0_height\" type=\"double\"/>\n<!-- end of change depending on model-->\n            </fields>\n          </schema>\n          <models>\n            <offline model-type=\"_renamemodeltype_\">\n              <input-map>\n                <properties>\n                  <property name=\"_image_\"><![CDATA[_resized_image_]]></property>\n                  <!--This maps the _resized_image_ field in ESP to the _image_ variable that the Astore expects. Change if needed-->\n                </properties>\n              </input-map>\n            </offline>\n          </models>\n        </window-score>\n        <window-model-reader model-type=\"_renamemodeltype_\" name=\"w_model_reader\">\n          <parameters>\n            <properties>\n              <property name=\"reference\"><![CDATA[@ESP_PROJECT_HOME@/analytics/@MODEL_NAME@]]></property>\n              <property name=\"USEGPUESP\"><![CDATA[1]]></property>\n              <!--The model will use a GPU if available, otherwise it will use a CPU-->\n            </properties>\n          </parameters>\n        </window-model-reader>\n        <window-counter count-interval=\"1 seconds\" name=\"w_counter\"/>\n      </windows>\n      <edges>\n        <edge role=\"data\" source=\"w_source\" target=\"w_resize\"/>\n        <edge role=\"data\" source=\"w_resize\" target=\"w_score\"/>\n        <edge role=\"model\" source=\"w_model_reader\" target=\"w_score\"/>\n        <edge source=\"w_score\" target=\"w_counter\"/>\n      </edges>\n    </contquery>\n  </contqueries>\n</project>\n\n;\nrun;\n\ndata _null_;\n\tcall symputx(\"newmac_model_name\", %LOWCASE(\"&mac_model_name\"));\nrun;\n\nods package(ESPOutput) open nopf;\nods package(ESPOutput) add file=\"&ESPziplocation./model.xml\" path=\"model\";\nods package(ESPOutput) add \n\tfile=\"&mac_project_path./&newmac_model_name..&mac_model_type\" path=\"analytics\";\n&_incdtestvidfile_;\nods package(ESPOutput) publish archive\nproperties(archive_name=\"&ESPzipfilename..zip\"\narchive_path=\"&ESPziplocation\");\nods package(ESPOutput) close;\n%SYMDEL\nESPzipfilename\nESPziplocation\nmac_project_path\nnewmac_model_name\nmac_model_type\nlist_of_caslibs\n_incdtestvidfile_\nincludevidfile_\nmac_num_objs\nmac_image_width\nmac_image_height\nreplacevideonamehere / NOWARN;\n%SYSMACDELETE mac4testvid;\n%SYSMACDELETE columnExists;\n"}}