{"creationTimeStamp":"2024-12-30T17:24:11.444Z","modifiedTimeStamp":"2025-01-30T16:34:41.246Z","createdBy":"charlie.vismara@sas.com","modifiedBy":"charlie.vismara@sas.com","name":"SID - Create DataGrid.step","displayName":"SID - Create DataGrid.step","localDisplayName":"SID - Create DataGrid.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/1a245339-4c4f-4b37-b376-8771b9d73bc0","uri":"/dataFlows/steps/1a245339-4c4f-4b37-b376-8771b9d73bc0","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/1a245339-4c4f-4b37-b376-8771b9d73bc0","uri":"/dataFlows/steps/1a245339-4c4f-4b37-b376-8771b9d73bc0","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/1a245339-4c4f-4b37-b376-8771b9d73bc0","uri":"/dataFlows/steps/1a245339-4c4f-4b37-b376-8771b9d73bc0","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/1a245339-4c4f-4b37-b376-8771b9d73bc0","uri":"/dataFlows/steps/1a245339-4c4f-4b37-b376-8771b9d73bc0"},{"method":"POST","rel":"copy","href":"/dataFlows/steps/1a245339-4c4f-4b37-b376-8771b9d73bc0/copy","uri":"/dataFlows/steps/1a245339-4c4f-4b37-b376-8771b9d73bc0/copy","responseType":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/1a245339-4c4f-4b37-b376-8771b9d73bc0","uri":"/dataFlows/steps/1a245339-4c4f-4b37-b376-8771b9d73bc0","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/1a245339-4c4f-4b37-b376-8771b9d73bc0","uri":"/dataFlows/steps/1a245339-4c4f-4b37-b376-8771b9d73bc0","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[{"name":"inputtable","displayName":"inputtable","localDisplayName":"inputtable","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table"}],"outputPorts":[{"name":"outputtable","displayName":"outputtable","localDisplayName":"outputtable","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table","supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"Options\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Options\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"inputtable\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Source table\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"gridcols\",\n\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\"label\": \"Select data grid columns:\",\n\t\t\t\t\t\"include\": null,\n\t\t\t\t\t\"order\": true,\n\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"table\": \"inputtable\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"classvars\",\n\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\"label\": \"Group by columns:\",\n\t\t\t\t\t\"include\": null,\n\t\t\t\t\t\"order\": true,\n\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"table\": \"inputtable\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"outputtable\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Target table\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"data_grid_column_name\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Define name for data grid target variable:\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"About\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"SID - Create DataGrid\\n==========\\n\\nThis custom step allow the user to serialize source columns into a Json data grid using DCM_SERIALIZEGRID macro function.\\n\\nThe generated data grid is stored into a data grid column in the target table.\\n\\nSource columns containing class variables to group by must also be specified. These class variables are added to the target table and a datagrid will be created for each class variables combination.\\n\\nSource and Target columns can be CAS tables but must then be defined in the same CAS session.   \\n\\nTarget column for the datagrid will be of 32,767 max length for a SAS dataset and of 10,485,760 max lenght for a CAS table. If the generated data grids are longer, truncation will occur and a warning will be issued. \\n\\nTrailing blanks inside generated data grid  are removed by a post-processes. \\n\\nBasic validation is performed. If unbalanced brackets are detected, a warning will be issued and the record will be flagged as invalid (valid_datagrid=0). \",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectionPrereqs\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Pre-requisites\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"textPrereqs\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Tested on Viya version Stable 2024.12\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectionDocumentation\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Documentation\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"textDocumentation\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"DCM_SERIALIZEGRID macro (https://go.documentation.sas.com/doc/en/edmcdc/default/edmdatagrids/n16ywg120fchftn1fxqdw245jax5.htm)\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Data Grid Usage in SAS Intelligent Decisioning (https://go.documentation.sas.com/doc/en/edmcdc/default/edmdatagrids/p1x00nj2uyxez7n14kl0bbt4mw9c.htm)\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectionChangelog\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Changelog\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"textChangelog\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"* Version: 1.0 (30DEC2024)\\n      - Initial version\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"inputtable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"gridcols\": [],\n\t\t\"classvars\": [],\n\t\t\"outputtable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"data_grid_column_name\": \"_DataGrid_\"\n\t}\n}","templates":{"SAS":"/*---------------------------------------------------------------------------------------- *\n    This custom step allow the user serialize input data into a datagrid using DCM_SERIALIZEGRID macro function. \n\tSome additional actions are performed to ensure a proper datagrid result (trim & basic validation).\n\tBy default the datagrid column lentgh is the max length of 32,767 bytes. \n *------------------------------------------------------------------------------------------*/\n\n/*---------------------------------------------------------------------------------------- *\n    Serialization into DataGrid\n\tMacro DCM_SERIALIZED : https://go.documentation.sas.com/doc/en/edmcdc/default/edmdatagrids/n16ywg120fchftn1fxqdw245jax5.htm\n *------------------------------------------------------------------------------------------*/\n\n%DCM_SERIALIZEGRID (\n   GRIDCOLNAME=&data_grid_column_name.,\n   GRIDSOURCETABLE=&inputtable.,\n   OUTPUTTABLE=&outputtable.,\n   CLASSVARS=&classvars.,\n   GRIDCOLS=&gridcols.\n)\n\n/*---------------------------------------------------------------------------------------- *\n    Data trim and basic datagrid validation \n\t\t--> Character variables are not properly trimmed during serialization. \n\t\t\tTrailing blanks are removed below by regex. \n\t\t--> If serialized DataGrid is > 32,767 bytes then the datagrid will be truncated. \n\t\t\tBasic validation is performed to detected theses cases. \n\t\t\tIf unbalance brakets are detected, a valid_datagrid flag = 0 and a warning is printed to the log. \n *------------------------------------------------------------------------------------------*/\n\ndata &outputtable. (drop= nof_open_curly nof_close_curly nof_open_square nof_close_square) ; \n   set &outputtable. ;\n   valid_datagrid = 1 ; \n   &data_grid_column_name.=prxchange('s/\\[\\\"\\s+/[\"/', -1, &data_grid_column_name.);\n   &data_grid_column_name.=prxchange('s/\\s+\\\"\\]/\"]/', -1, &data_grid_column_name.);\n   &data_grid_column_name.=prxchange('s/\\s+\\\"\\,/\",/', -1, &data_grid_column_name.);\n   nof_open_curly = countc(&data_grid_column_name., '{');\n   nof_close_curly = countc(&data_grid_column_name., '}');\n   nof_open_square = countc(&data_grid_column_name., '[');\n   nof_close_square = countc(&data_grid_column_name., ']');\n   if nof_open_curly ne nof_close_curly or nof_open_square ne nof_close_square then do ; \n      valid_datagrid = 0 ; \t\n      put \"WARNING: invalid datagrid at dataset line \" _N_ ; \n   end ; \nrun ;\n"}}