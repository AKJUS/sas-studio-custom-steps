{"type":"code","name":"Lookup.step","displayName":"Lookup.step","description":"","templates":{"SAS":"/*==========================================================================* \n * Custom Step:     Lookup                                                  * \n * Transform:       Lookup                                                  * \n * Description:     Do lookup using hash object.                            * \n *==========================================================================*/ \n\n/*\nRequired macro variables\n\nBaseTable\nBaseKeepColumns_count\n\nFor each BaseTableKeepColumn:\nBaseKeepColumns_<N>_name\nBaseKeepColumns_<N>_type\nBaseKeepColumns_<N>_rawlength\n\nKeyNotFoundValue\n\nLookupKeyColumns_count\n\nFor each LookupKeyColumn:\nLookupKeyColumns_<N>_name\n\nLookupTable\nReturnColumn_1_name\nReturnColumn_1_type\nReturnColumn_1_rawlength\n\nResultTable\nResultTable_lib\nResultTable_name\n*/\n\n%macro combineparameters(\n       parameterID=\n      ,formula=name\n      ,resultVariableSuffix=\n      ,delimiter=\n   );\n   %local i TypeBefore;\n   %global &parameterID.&resultVariableSuffix.;\n   \n   %** Initialize variables **;\n   %let &parameterID.&resultVariableSuffix. = ;\n\n   data _NULL_;\n      call symputx('formula',\n                     prxchange(\n                         prxparse('s/(format|informat|label|name|name_base|rawlength|type)/&&&parameterID._&i._$1/')\n                        ,-1,\"&formula.\")\n                    ,'L');\n   run;\n   \n   %do i=1 %to &&&parameterID._count.;\n      %let TypeBefore = &&&parameterID._&i._type;\n      %if %upcase(&&&parameterID._&i._type)=CHAR or %upcase(&&&parameterID._&i._type)=CHARACTER %then %let &parameterID._&i._type = $;\n      %else %if %upcase(&&&parameterID._&i._type)=NUMERIC %then %let &parameterID._&i._type=;\n      %if &i.>1 %then %let &parameterID.&resultVariableSuffix. = &&&parameterID.&resultVariableSuffix.&delimiter.;\n      %let &parameterID.&resultVariableSuffix. = &&&parameterID.&resultVariableSuffix. &formula.;\n      \n      %** Reset column selector TYPE macro variable **;\n      %let &parameterID._&i._type = &TypeBefore.;\n   %end;\n%mend combineParameters;\n\n%macro lookup;\n\n\t%global KeyNotFoundValue;\n   \n   %**** Prepare Prompt Values ****;\n   %combineParameters(\n       parameterID=BaseKeepColumns\n   );\n\n   %combineParameters(\n       parameterID=BaseKeepColumns\n      ,formula=%str(name length=typerawlength)\n      ,resultVariableSuffix=Attrib\n   );\n   \n   %combineParameters(\n       parameterID=LookupKeyColumns\n      ,formula=%str(%\"name%\")\n      ,resultVariableSuffix=DefineKey\n      ,delimiter=%str(,)\n   );\n\n   %combineParameters(\n       parameterID=LookupKeyColumns\n      ,formula=%str(name)\n      ,resultVariableSuffix=\n      ,delimiter=%str(,)\n   );\n\n   %combineParameters(\n       parameterID=LookupKeyColumns\n      ,formula=%str(key: name)\n      ,resultVariableSuffix=Key\n      ,delimiter=%str(,)\n   );\n\n   %combineParameters(\n       parameterID=LookupKeyColumns\n      ,formula=%str(name length=typerawlength)\n      ,resultVariableSuffix=Attrib\n   );\n   \n   %let ReturnColumn = &ReturnColumn_1_name.;\n   %combineParameters(\n       parameterID=ReturnColumn\n      ,formula=%str(name length=typerawlength)\n      ,resultVariableSuffix=Attrib\n   );\n\n   %**** Delete result table ****;\n   proc datasets lib = &ResultTable_lib. nolist nowarn memtype = (data view);\n      delete &ResultTable_name.;\n   quit;\n   \n   %****---- Begin DATA step to perform lookups  ----****; \n   DATA  &ResultTable.\n            (keep = &BaseKeepColumns. &ReturnColumn_1_name. )\n         ; \n      \n      attrib &BaseKeepColumnsAttrib.\n             &LookupKeyColumnsAttrib.\n             &ReturnColumnAttrib.\n             ; \n      \n      retain missing0-missing0 0; \n      \n      etls_assign_target_value = 0; \n      %** Build hash objects from lookup tables before reading first source row  **;\n      if (_n_ = 1) then \n      do; \n         %** Build hash h0 from lookup table work.origin_dim **;\n         nlobs = .; \n         dsid = open(\"&LookupTable.\"); \n         if (dsid > 0) then \n         do; \n            if ( attrc(dsid, 'MTYPE') = 'DATA' ) then \n               nlobs = attrn(dsid, 'NLOBS'); \n            else \n               nlobs = -1; \n               \n            dsid = close(dsid); \n            if (nlobs ^= 0) then \n            do; \n               if (nlobs > 0) then \n                  exponent = ceil(log2(nlobs)); \n               else \n                  exponent = 8; \n               declare hash h0(dataset: \"&LookupTable.\", hashexp: exponent);\n               h0.defineKey( &LookupKeyColumnsDefineKey.);\n               h0.defineData( \"&ReturnColumn.\");\n               h0.defineDone();\n               if (nlobs = -1) then \n               do; \n                  if (h0.Num_Items < 1) then\n                  do; \n                     put \"NOTE: Lookup table is empty: &LookupTable.\";\n                     put \"NOTE: Abort action indicated, condition= Lookup table is empty:\"\n                          \" &LookupTable.\";\n                     abort 3; \n                  end; \n               end; \n            end; \n            else \n            do; \n               put \"NOTE: Lookup table is empty: &LookupTable.\";\n               put \"NOTE: Abort action indicated, condition= Lookup table is empty:\"\n                    \" &LookupTable.\";\n               abort 3; \n            end; \n         end; \n         else \n         do; \n            put \"NOTE: Lookup table does not exist or cannot be opened:\"\n                 \" &LookupTable.\";\n            \n            put \"NOTE: Abort action indicated, condition= Lookup table missing:\"\n                 \" &LookupTable.\";\n            abort 3; \n         end; \n         \n         call missing (&LookupKeyColumns., &ReturnColumn.); \n      \n      end; %** All hash objects have been defined **;\n      \n      %** Read a row from the source table  **;\n      set &BaseTable. end = eof;\n      \n      %** Is the current key value stored in hash h0?  **;\n      rc0 = h0.find(&LookupKeyColumnsKey.);\n      %** Examine success of lookups  **;\n      if ( rc0=0 ) then \n      do; \n         %** Write row to target  **;\n         output &ResultTable.; \n      end; \n      else \n      do; \n         error_total + 1; \n         \n         if (rc0 ^= 0) then \n         do; \n            exception_total + 1; \n            %** Check: Lookup value not found-Set target columns to missing  **;\n            %if \"&KeyNotFoundValue.\"=\"\" %then %do;\n               call missing (&ReturnColumn.); \n            %end;\n            %else %do;\n               %if \"%upcase(&ReturnColumn_1_type.)\"=\"CHARACTER\" %then %do;\n                  &ReturnColumn. = \"&KeyNotFoundValue.\";\n               %end;\n               %else %do;\n                  &ReturnColumn. = &KeyNotFoundValue.;\n               %end;\n            %end;\n            etls_assign_target_value = 1; \n         end; \n         \n         %** Set target columns to value/missing requested?  **;\n            %** Write row to target  **;\n         if (etls_assign_target_value eq 1) then \n            output &ResultTable.; \n      \n      end; %** One or more lookups failed **;\n      \n      if (eof = 1) then \n      do; \n         put \"Source records with errors: \" error_total ; \n         put \"Total lookup exceptions: \" exception_total ; \n      end; \n   \n   run; \n\n%mend lookup;\n\n\n%lookup;\n"},"properties":{},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"Settings\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Lookup Settings\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"BaseTable\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Base table\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"BaseKeepColumns\",\n\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\"label\": \"Columns to keep\",\n\t\t\t\t\t\"table\": \"BaseTable\",\n\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\"max\": 0,\n\t\t\t\t\t\"min\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"LookupTable\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Lookup table\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"Select the lookup table\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"LookupKeyColumns\",\n\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\"label\": \"Lookup Key Column(s)\",\n\t\t\t\t\t\"table\": \"BaseTable\",\n\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\"max\": 0,\n\t\t\t\t\t\"min\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"ReturnColumn\",\n\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\"label\": \"Return Column\",\n\t\t\t\t\t\"table\": \"LookupTable\",\n\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\"max\": 1,\n\t\t\t\t\t\"min\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"KeyNotFoundValue\",\n\t\t\t\t\t\"type\": \"textarea\",\n\t\t\t\t\t\"label\": \"Value to use when lookup does not return values\",\n\t\t\t\t\t\"placeholder\": \"Add a value to use. If no value is specified a missing value will be used.\",\n\t\t\t\t\t\"required\": false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"ResultTable\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Result Table\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"about\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"The \\\"Lookup\\\" Custom Step will add a column to a table by performing a lookup on another table using hash objects.\\n\\nUSER INTERFACE\\n\\n- Columns to keep: Select columns from the input table to keep in the result table.\\n\\n- Lookup Key Column(s): Select the column(s) to act as the key for the lookup.\\n\\n- Return Column: Select the column from the lookup table to return.\\n\\n- Value to use when lookup does not return values: Add a default value to use when no value is returned when doing the lookup. Do not enclose character values in quotes.\\n\\n- Input Port 1: The base table to add a new column to.\\n\\n- Input Port 2: The lookup table used where the values of the new columns are found.\\n\\n- Output Port: The result table containing the selected columns from the base table and the new column.\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"BaseTable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"BaseKeepColumns\": [],\n\t\t\"LookupTable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"LookupKeyColumns\": [],\n\t\t\"ReturnColumn\": [],\n\t\t\"KeyNotFoundValue\": \"\"\n\t}\n}","flowMetadata":{"inputPorts":[{"name":"BaseTable","displayName":"BaseTable","minEntries":1,"maxEntries":1,"type":"table"},{"name":"LookupTable","displayName":"LookupTable","minEntries":1,"maxEntries":1,"type":"table"}],"outputPorts":[{"name":"ResultTable","displayName":"ResultTable","minEntries":1,"maxEntries":1,"columnDelta":{"automaticMapping":[],"removeColumnArguments":[],"keepColumnArguments":["BaseKeepColumns","ReturnColumn"],"updateColumnArguments":[]},"type":"table"}]}}