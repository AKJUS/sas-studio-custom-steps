{"creationTimeStamp":"2023-04-05T02:53:56.813Z","modifiedTimeStamp":"2023-04-05T15:15:34.490Z","createdBy":"Sundaresh.Sankaran@sas.com","modifiedBy":"Sundaresh.Sankaran@sas.com","name":"NLP - Predefined Sentiment Analysis.step","displayName":"NLP - Predefined Sentiment Analysis.step","localDisplayName":"NLP - Predefined Sentiment Analysis.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/ddb4de2b-58ae-480a-bd28-b6b574bff499","uri":"/dataFlows/steps/ddb4de2b-58ae-480a-bd28-b6b574bff499","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/ddb4de2b-58ae-480a-bd28-b6b574bff499","uri":"/dataFlows/steps/ddb4de2b-58ae-480a-bd28-b6b574bff499","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/ddb4de2b-58ae-480a-bd28-b6b574bff499","uri":"/dataFlows/steps/ddb4de2b-58ae-480a-bd28-b6b574bff499","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/ddb4de2b-58ae-480a-bd28-b6b574bff499","uri":"/dataFlows/steps/ddb4de2b-58ae-480a-bd28-b6b574bff499"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/ddb4de2b-58ae-480a-bd28-b6b574bff499","uri":"/dataFlows/steps/ddb4de2b-58ae-480a-bd28-b6b574bff499","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/ddb4de2b-58ae-480a-bd28-b6b574bff499","uri":"/dataFlows/steps/ddb4de2b-58ae-480a-bd28-b6b574bff499","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[{"name":"inputTable","displayName":"inputTable","localDisplayName":"inputTable","minEntries":1,"maxEntries":1,"type":"table"}],"outputPorts":[{"name":"outputTable","displayName":"outputTable","localDisplayName":"outputTable","minEntries":1,"maxEntries":1,"type":"table","columnDelta":{"keepColumnArguments":["docId","textVar","outputTableColumns"]},"supportsView":false,"requiresStructure":false},{"name":"matchOut","displayName":"matchOut","localDisplayName":"matchOut","minEntries":1,"maxEntries":1,"type":"table","supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"param\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Parameters\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"inputTable\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Input table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"Input table\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"inputParam\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Input parameters\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"textVar\",\n\t\t\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\t\t\"label\": \"Select text column:\",\n\t\t\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\t\t\"max\": 1,\n\t\t\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"table\": \"inputTable\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"docId\",\n\t\t\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\t\t\"label\": \"Select document ID column:\",\n\t\t\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\t\t\"max\": 1,\n\t\t\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"table\": \"inputTable\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note this custom step uses updated SAS predefined sentiment analysis models (run by the applySentimentConcepts action).  These are presently supported for 17 of the 33 languages SAS provides native analysis for.  Additional languages shall be added to the list below as and when they get supported.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"language\",\n\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\"label\": \"Select language (English is the default):\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"English\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Arabic\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Chinese\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Danish\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Dutch\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Farsi\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"French\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"German\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Hungarian\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Italian\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Japanese\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Korean\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Norwegian\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Portuguese\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Spanish\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Swedish\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Turkish\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"outputSpec\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Output specifications\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"outputTableColumns\",\n\t\t\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\t\t\"label\": \"Select additional columns to copy to output table:\",\n\t\t\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\t\t\"min\": 0,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"table\": \"inputTable\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"outputTable\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Output table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"Output table\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"matchOut\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Sentiment matches table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"Sentiment matches table\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"page2\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"NLP - Predefined Sentiment Analysis\\n\\nThis custom step helps you analyse a text corpus for the sentiment expressed in the same.  It uses a SAS Cloud Analytics Services (CAS) action, sentimentAnalysis.applySentimentConcepts, along with a language-specific, predefined, document-level sentiment analysis model, following a symbolic AI (rules-based) approach.\\n\\nUse this to classify customer reviews, voice of customer / survey responses, public opinion and any other text data which reflects attitudes and emotions, into positive or negative sentiment.\\n\\nThis custom step uses a CAS action which requires a SAS Visual Analytics license.\\n \\n\\nParameters:\\n\\nNote that this custom step runs on data loaded in SAS Cloud Analytics Services (CAS). Ensure you are connected to CAS before running this step.\\n\\n\\nInput parameters:\\n\\n1. Input table (input port,required): connect a CAS table containing text intended for sentiment analysis.  The table should contain at least one character / varchar variable with the text to be scored, along with a document ID.\\n2. Text column (required): select either a char/ varchar column from the input table.\\n3. Document ID column (required): select a column which provides an ID for each observation.\\n4. Language (default is English): select the language in which you wish to perform sentiment analysis.  You have a choice of 17 languages, with English as the default selection.\\n\\n\\nOutput specifications:\\n\\n1. Additional columns (optional): select additional columns from the input table which you would like to carry over to the output table.\\n2. Output table (output port, required): connect a CAS table to contain the document-level sentiment and the score.\\n3. Matches table (output port, required): connect a CAS table to obtain keyword matches per document, corresponding to the concepts within the sentiment analysis model.\\n\\n\\nDocumentation:\\n\\n- The sentimentAnalysis.applySentimentConcepts CAS action : https://go.documentation.sas.com/doc/en/sasstudiocdc/default/pgmsascdc/casanpg/cas-sentimentanalysis-applysentimentconcepts.htm\\n\\n\\nCreated / contact : \\n\\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com)\\n\\n\\nVersion : 1.0.   (04APR2023)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"inputTable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"textVar\": [],\n\t\t\"docId\": [],\n\t\t\"language\": {\n\t\t\t\"value\": \"English\"\n\t\t},\n\t\t\"outputTableColumns\": [],\n\t\t\"outputTable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"matchOut\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t}\n\t},\n\t\"columnExclusions\": [\n\t\t[\n\t\t\t\"outputTableColumns\",\n\t\t\t\"docId\"\n\t\t]\n\t]\n}","templates":{"SAS":"/* SAS templated code goes here */\n\n/*-----------------------------------------------------------------------------------------*\n   This macro creates a global macro variable called _usr_nameCaslib\n   that contains the caslib name (aka. caslib-reference-name) associated with the libname \n   and assumes that the libname is using the CAS engine.\n\n   As sysvalue has a length of 1024 chars, we use the trimmed option in proc sql\n   to remove leading and trailing blanks in the caslib name.\n*------------------------------------------------------------------------------------------*/\n\n%macro _usr_getNameCaslib(_usr_LibrefUsingCasEngine); \n\n   %global _usr_nameCaslib;\n   %let _usr_nameCaslib=;\n\n   proc sql noprint;\n      select sysvalue into :_usr_nameCaslib trimmed from dictionary.libnames\n      where libname = upcase(\"&_usr_LibrefUsingCasEngine.\") and upcase(sysname)=\"CASLIB\";\n   quit;\n\n%mend _usr_getNameCaslib;\n\n/*-----------------------------------------------------------------------------------------*\n  Call the above \"caslib check\" macro for each of the required tables (and their libnames)\n  presently connected to this step.\n*------------------------------------------------------------------------------------------*/\n\n%_usr_getNameCaslib(&inputTable_lib.);\n%let input_table_lib=&_usr_nameCaslib.;\n\n%if \"&input_table_lib.\"=\"\" %then %do;\n   %put NOTE: Please provide a valid input table and libref using the CAS engine.;\n   data _null_;\n      abort exit 4321;\n   run;\n%end;\n\n/* Blank out the _usr_nameCaslib macro variable so as to not leave things dangling.       */\n%let _usr_nameCaslib=;\n\n%_usr_getNameCaslib(&outputTable_lib.);\n%let output_table_lib=&_usr_nameCaslib.;\n\n%if \"&output_table_lib.\"=\"\" %then %do;\n   %put NOTE: Please provide a valid output table and libref using the CAS engine.;\n   data _null_;\n      abort exit 4321;\n   run;\n%end;\n\n/* Blank out the _usr_nameCaslib macro variable so as to not leave things dangling.       */\n%let _usr_nameCaslib=;\n\n%_usr_getNameCaslib(&matchOut_lib.);\n%let matchout_table_lib=&_usr_nameCaslib.;\n\n%if \"&matchout_table_lib.\"=\"\" %then %do;\n   %put NOTE: Please provide a valid output matches table and libref using the CAS engine.;\n   data _null_;\n      abort exit 4321;\n   run;\n%end;\n\n/* Blank out the _usr_nameCaslib macro variable so as to not leave things dangling.       */\n%let _usr_nameCaslib=;\n\n/*-----------------------------------------------------------------------------------------*\n   This block of code handles the copy of specified input table columns to the output \n   table. For this purpose, we make use of a utility macro to obtain a list of selected\n   variables, separated by spaces. \n\n   We then handle two possible scenarios - one in which no additional columns were selected,\n   and the other in which one of more columns were selected - within an %IF block in open\n   code. If no columnns are selected, then a string (representing the copyVars option of \n   the CAS action) is set to blank. Otherwise, a string containing the copyVars code \n   block (e.g. copyVars={\"a..\",\"..\"}) is created with selected columns populated.\n\n   Note : For those interested, a little dated but insightful SAS Global Forum paper on \n   the best way to evaluate if a macro variable is blank (as used below), provided here:\n   http://support.sas.com/resources/papers/proceedings09/022-2009.pdf\n\n   CAS requires a quoted list of comma-separated values within its action calls, therefore\n   we carry out some string substitution to convert the space-separated list into a quoted,\n   comma-separated list.\n*------------------------------------------------------------------------------------------*/\n\n%let blankSeparatedList = %_flw_get_column_list(_flw_prefix=outputTableColumns);\n\n%if %sysevalf(%superq(blankSeparatedList)=,boolean)  %then %do;\n   %put \"Blank list provided. All Columns will be copied.\";\n   %let commaSeparatedList=;\n   %let copyVarStringPre=;\n   %let copyVarStringPost=;\n%end;\n%else %do;\n/* The following utility macro creates a comma-separated list from the space separated list */\n   %let commaSeparatedList = %_flw_get_column_list(_flw_prefix=outputTableColumns, _delim=%str(,));\n/* Create quoted, comma-separated lists for use inside a CAS action                         */\n   data _null_;\n      call symput(\"commaSeparatedList\",'\"'||tranwrd(\"&commaSeparatedList.\",\",\",'\",\"')||'\"');\n   run;\n/* Additional values for preceding and succeeding text, yielding copyVars={\"a\",\"b\",\"c\"}    */\n   data _null_;\n      call symput(\"copyVarStringPre\",\"copyVars={\");\n      call symput(\"copyVarStringPost\",\"}\");\n   run;\n%end;\n\n\n\n/*-----------------------------------------------------------------------------------------*\n   This is the main block of code which calls the applySentimentConcepts action. \n   Prior to calling the action, we obtain necessary inputs from the UI, associate the \n   desired language with a language-specific sentiment model, and load the model for use\n   within the action. Some helper functions facilitate the same\n*------------------------------------------------------------------------------------------*/\nproc cas;\n\n/*-----------------------------------------------------------------------------------------*\n   Helper functions\n*------------------------------------------------------------------------------------------*/\n\n/* langToSentFile - function to provide a corresponding sent file for a given language     */\n\n   function langToSentFile(language);\n      if language = \"Arabic\" then return \"ar_sentiment_liti.sashdat\";\n      else if language = \"Chinese\" then return \"zh_sentiment_liti.sashdat\";\n      else if language = \"Danish\" then return \"da_sentiment_liti.sashdat\";\n      else if language = \"Dutch\" then return \"nl_sentiment_liti.sashdat\";\n      else if language = \"English\" then return \"en_sentiment_liti.sashdat\";\n      else if language = \"Farsi\" then return \"fa_sentiment_liti.sashdat\";\n      else if language = \"French\" then return \"fr_sentiment_liti.sashdat\";\n      else if language = \"German\" then return \"de_sentiment_liti.sashdat\";\n      else if language = \"Hungarian\" then return \"hu_sentiment_liti.sashdat\";\n      else if language = \"Italian\" then return \"it_sentiment_liti.sashdat\";\n      else if language = \"Japanese\" then return \"ja_sentiment_liti.sashdat\";\n      else if language = \"Korean\" then return \"ko_sentiment_liti.sashdat\";\n      else if language = \"Norwegian\" then return \"no_sentiment_liti.sashdat\";\n      else if language = \"Portuguese\" then return \"pt_sentiment_liti.sashdat\";\n      else if language = \"Spanish\" then return \"es_sentiment_liti.sashdat\";\n      else if language = \"Swedish\" then return \"sv_sentiment_liti.sashdat\";\n      else if language = \"Turkish\" then return \"tr_sentiment_liti.sashdat\";\n   end;\n\n/* doesTableExist - provides an indicator whether a CAS table is loaded in memory or not  */\n\n   function doesTableExist(casLib, casTable);\n      table.tableExists result = tableExistsResultTable status = rc / caslib = casLib, table = casTable;\n      tableExists = dictionary(tableExistsResultTable, \"exists\");\n      return tableExists;\n   end;\n   \n/* loadSentFile - Loads a predefined sentiment analysis file if needed                    */\n\n   function loadSentTable(sentTable,sentfile);\n      sentTableExists = doesTableExist(\"referenceData\",sentTable);\n      if sentTableExists = 0 then do;\n         table.loadTable /\n            casout = {name=sentTable,caslib=\"referenceData\"}\n            caslib =\"referenceData\"\n            path = sentfile\n         ;\n      end;\n   end;\n/*  End - Helper Functions.                                                                */\n\n\n/*  Read in variables from the UI                                                          */\n   language = symget(\"language\");\n   input_table_name = symget(\"inputTable_name_base\");\n   input_table_lib = symget(\"input_table_lib\");\n   output_table_name = symget(\"outputTable_name_base\");\n   output_table_lib = symget(\"output_table_lib\");\n   matchout_table_name = symget(\"matchOut_name_base\");\n   matchout_table_lib = symget(\"matchout_table_lib\");\n\n/*-----------------------------------------------------------------------------------------*\n   Load Sentiment model and call action.\n   Note: The predefined sentiment analysis tables are available in the referenceData caslib\n   and may not all be loaded to memory by default\n*------------------------------------------------------------------------------------------*/\n\n   sentfile = langToSentFile(language);\n   sentTable = scan(sentfile,1,\".\",\"MO\");\n   loadSentTable(sentTable,sentfile);\n\n/* Run Sentiment Analysis on the given input data                                          */\n\n   sentimentAnalysis.applySentimentConcepts / \n      casout = {name = output_table_name, \n                caslib = output_table_lib, \n                replace = True}\n      &copyVarStringPre.&commaSeparatedList.&copyVarStringPost.\n      docId = \"&docId_1_name.\"\n      table = {name = input_table_name, \n               caslib = input_table_lib, \n               where = \"&textVar_1_name_base. ne ''\"}\n      model = {name = sentTable, caslib = \"referenceData\"}\n      text = \"&textVar_1_name.\"\n      conceptMatchesOut = {name = matchout_table_name, \n                           caslib = matchout_table_lib, \n                           replace = True}\n   ;\n\n\nquit;"}}