{"creationTimeStamp":"2023-03-23T17:25:36.877Z","modifiedTimeStamp":"2023-03-24T09:58:34.431Z","createdBy":"sinsrn","modifiedBy":"sinsrn","name":"NLP - Train Text Classifier.step","displayName":"NLP - Train Text Classifier.step","localDisplayName":"NLP - Train Text Classifier.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/a735de8d-636b-48a7-aa8a-b3977d59eb9a","uri":"/dataFlows/steps/a735de8d-636b-48a7-aa8a-b3977d59eb9a","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/a735de8d-636b-48a7-aa8a-b3977d59eb9a","uri":"/dataFlows/steps/a735de8d-636b-48a7-aa8a-b3977d59eb9a","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/a735de8d-636b-48a7-aa8a-b3977d59eb9a","uri":"/dataFlows/steps/a735de8d-636b-48a7-aa8a-b3977d59eb9a","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/a735de8d-636b-48a7-aa8a-b3977d59eb9a","uri":"/dataFlows/steps/a735de8d-636b-48a7-aa8a-b3977d59eb9a"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/a735de8d-636b-48a7-aa8a-b3977d59eb9a","uri":"/dataFlows/steps/a735de8d-636b-48a7-aa8a-b3977d59eb9a","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/a735de8d-636b-48a7-aa8a-b3977d59eb9a","uri":"/dataFlows/steps/a735de8d-636b-48a7-aa8a-b3977d59eb9a","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[{"name":"trainingTable","displayName":"trainingTable","localDisplayName":"trainingTable","minEntries":1,"maxEntries":1,"type":"table"},{"name":"validationTable","displayName":"validationTable","localDisplayName":"validationTable","minEntries":0,"maxEntries":1,"type":"table"},{"name":"testTable","displayName":"testTable","localDisplayName":"testTable","minEntries":0,"maxEntries":1,"type":"table"}],"outputPorts":[{"name":"modelOut","displayName":"modelOut","localDisplayName":"modelOut","minEntries":1,"maxEntries":1,"type":"table","supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"parameters\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Parameters\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"trainingTable\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Training table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"validationTable\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Validation table:\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"testTable\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Test table:\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section1\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Input parameters\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"textVar\",\n\t\t\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\t\t\"label\": \"Select text variable:\",\n\t\t\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\t\t\"max\": 1,\n\t\t\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"table\": \"trainingTable\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"targetVar\",\n\t\t\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\t\t\"label\": \"Select target variable:\",\n\t\t\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\t\t\"max\": 1,\n\t\t\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"table\": \"trainingTable\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"gpuEnabled\",\n\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\"label\": \"Enable GPU\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"numDevices\",\n\t\t\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\t\t\"label\": \"Specify GPU device ID (max 1):\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\t\t\"min\": null,\n\t\t\t\t\t\t\t\"visible\": \"$gpuEnabled\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"advancedParam\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Advanced parameters\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"batchSize\",\n\t\t\t\t\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Batch size:\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"max\": 32,\n\t\t\t\t\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\t\t\t\t\"excludemin\": false,\n\t\t\t\t\t\t\t\t\t\"excludemax\": false,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"chunkSize\",\n\t\t\t\t\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Chunk size:\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"max\": 512,\n\t\t\t\t\t\t\t\t\t\"min\": 4,\n\t\t\t\t\t\t\t\t\t\"excludemin\": false,\n\t\t\t\t\t\t\t\t\t\"excludemax\": false,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"maxEpochs\",\n\t\t\t\t\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Maximum epochs:\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"max\": 100000000,\n\t\t\t\t\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\t\t\t\t\"excludemin\": false,\n\t\t\t\t\t\t\t\t\t\"excludemax\": false,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"seedNumber\",\n\t\t\t\t\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Seed:\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"max\": 2147483646,\n\t\t\t\t\t\t\t\t\t\"min\": 0,\n\t\t\t\t\t\t\t\t\t\"excludemin\": false,\n\t\t\t\t\t\t\t\t\t\"excludemax\": false,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"validationPartitionFraction\",\n\t\t\t\t\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Validation partition fraction:\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"max\": 0.95,\n\t\t\t\t\t\t\t\t\t\"min\": 0,\n\t\t\t\t\t\t\t\t\t\"excludemin\": false,\n\t\t\t\t\t\t\t\t\t\"excludemax\": false,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"modelOut\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Model output table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"about\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"NLP - Train Text Classifier\\n\\nThis custom step enables you to train a text classifier model based on deep learning (BERT-based transformer) architecture.\\n\\nIt uses the recently introduced SAS Visual Text Analytics (VTA) CAS action, textClassifier.trainTextClassifier.  This augments SAS approaches for Natural Language Processing-based classification models (in addition to rules-based classification). More details in the documentation (link provided below).\\n\\nUse this to train models which can classify customer reviews as per a star rating, carry out sentiment analysis, prioritize customer complaints, identify serious adverse events, and many other classification use-cases.\\n\\nUse of this custom step requires a SAS Visual Text Analytics (VTA) license.\\n \\nParameters:\\n\\nNote that this custom step runs on data loaded in SAS Cloud Analytics Services (CAS). Ensure you are connected to CAS before running this step.\\n\\nInput parameters:\\n\\n1. Input ports: connect CAS tables to the training table, validation table, and test table input ports.  At the minimum, a training table is required.\\n\\n2. Text variable: select a variable containing the text you wish to train a classifier upon.  Ensure you select either a char or varchar variable.\\n\\n3. Target variable: select a column containing the labelled target for which you wish to train a classifier. \\n\\n4. Enable GPU: choose between using GPU or CPU resources to train your model.  GPUs are recommended due to their performant nature.  At the same time, note that GPUs may not be readily available in all Viya environments, and may lead to higher cloud costs.  Check with your SAS administrator on the availability of GPU resources.\\n\\n5. As an optional step, if you select Enable GPU, you may choose to provide the device ID of the GPU you wish to use.  Currently, the action allows for only 1 GPU device to be used.\\n\\n6. Advanced parameters: you might like to modify hyperparameters governing the training process by changing provided default values.  Note this will affect speed and accuracy of your model.  It's suggested that you refer documentation (below) for more details.\\n\\nOutput table specifications:\\n\\n1. Output port: connect an output CAS table to contain the trained model.  Note that the output model is binary data which is not human-readable.\\n\\nDocumentation:\\n\\n1. textClassifier.trainTextClassifier CAS action : https://go.documentation.sas.com/doc/en/pgmsascdc/default/casvtapg/cas-textclassifier-traintextclassifier.htm\\n\\nCreated / contact : \\n\\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com)\\n\\nVersion : 1.0.   (18MAR2023)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"trainingTable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"validationTable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"testTable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"textVar\": [],\n\t\t\"targetVar\": [],\n\t\t\"gpuEnabled\": false,\n\t\t\"numDevices\": null,\n\t\t\"batchSize\": 16,\n\t\t\"chunkSize\": 256,\n\t\t\"maxEpochs\": 4,\n\t\t\"seedNumber\": 0,\n\t\t\"validationPartitionFraction\": 0.05,\n\t\t\"modelOut\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t}\n\t}\n}","templates":{"SAS":"/* SAS templated code goes here */\n\n/*--------------------------------------------------------------------------------------*\n   This macro creates a global macro variable called _usr_nameCaslib\n   that contains the caslib name (aka. caslib-reference-name) associated with the libname \n   and assumes that the libname is using the CAS engine.\n\n   As sysvalue has a length of 1024 chars, we use the trimmed option in proc sql\n   to remove leading and trailing blanks in the caslib name.\n*---------------------------------------------------------------------------------------*/\n\n%macro _usr_getNameCaslib(_usr_LibrefUsingCasEngine); \n\n   %global _usr_nameCaslib;\n   %let _usr_nameCaslib=;\n\n   proc sql noprint;\n      select sysvalue into :_usr_nameCaslib trimmed from dictionary.libnames\n      where libname=upcase(\"&_usr_LibrefUsingCasEngine.\") and upcase(sysname)=\"CASLIB\";\n   quit;\n\n%mend _usr_getNameCaslib;\n\n/*--------------------------------------------------------------------------------------*\n   macro to facilitate abort within a subsequent open code block.\n*---------------------------------------------------------------------------------------*/\n\n%macro abortthisblock;\n   %abort;\n%mend abortthisblock;\n\n/*--------------------------------------------------------------------------------------*\n  Call the above \"caslib check\" macro 4 times for each of the tables (and their libnames) presently connected to this step.\n*---------------------------------------------------------------------------------------*/\n\n%_usr_getNameCaslib(&trainingTable_lib.);\n%let training_table_lib=&_usr_nameCaslib.;\n\n%if \"&training_table_lib.\"=\"\" %then %do;\n   %put NOTE: Please provide a valid table and libref using the CAS engine.;\n   %abortthisblock;\n%end;\n\n%_usr_getNameCaslib(&validationTable_lib.);\n%let validation_table_lib=&_usr_nameCaslib.;\n\n%_usr_getNameCaslib(&testTable_lib.);\n%let test_table_lib=&_usr_nameCaslib.;\n\n%_usr_getNameCaslib(&modelOut_lib.);\n%let model_table_lib=&_usr_nameCaslib.;\n\n/* Blank out the _usr_nameCaslib macro variable so as to not leave things dangling. */\n%let _usr_nameCaslib=;\n\n\n/*--------------------------------------------------------------------------------------*\n/* Execute some string substitution for \"GPU Devices\" in case the user enables GPU and specifies a GPU device ID */\n\n/* Note : For those interested, a little dated but insightful SAS Global Forum paper on the best way to evaluate if a macro variable is  */\n/* blank (as used below), provided here : http://support.sas.com/resources/papers/proceedings09/022-2009.pdf */\n/*---------------------------------------------------------------------------------------*/\n\n%macro gpu_status_string_substitute;\n   %global deviceArgumentString;\n   %if &gpuEnabled.=0 %then %do;\n      %let deviceArgumentString=;\n   %end;\n   %else %do;\n      %if %sysevalf(%superq(numDevices)=,boolean) %then %do;\n         %let deviceArgumentString=;\n      %end;\n      %else %do;\n         data _null_;\n            call symput(\"deviceArgumentString\",\",device=&numDevices.\");\n         run;\n      %end;\n   %end;\n\n%mend gpu_status_string_substitute;\n\n%gpu_status_string_substitute;\n\n/*---------------------------------------------------------------------------------------*/\n/* Main Processing occurs below */\n/*---------------------------------------------------------------------------------------*/\n\nproc cas;\n\n/* Obtain values from the UI */\n   training_table_name=symget(\"trainingTable_name_base\");\n   training_table_lib=symget(\"training_table_lib\");\n   model_table_name=symget(\"modelOut_name_base\");\n   model_table_lib=symget(\"model_table_lib\");\n   target_variable=symget(\"targetVar_1_name_base\");\n   text_variable=symget(\"textVar_1_name_base\");\n   validation_table_name=symget(\"validationTable_name_base\");\n   validation_table_lib=symget(\"validation_table_lib\");\n   test_table_name=symget(\"testTable_name_base\");\n   test_table_lib=symget(\"test_table_lib\");\n\n   print(\"Your model will be written to \"||model_table_lib||\".\"||model_table_name);\n   print(\"Your training table is \"||training_table_lib||\".\"||training_table_name);\n\n/* Repurpose the training table as the validation table, if a validation table is not provided */\n   if validation_table_name=\"\" then do; \n      print(\"No Validation Table specified.  Using Training table for validation.\");\n      validation_table_name=training_table_name;\n      validation_table_lib=training_table_lib;\n   end;\n\n/* Repurpose the training table as the test table, if a test table is not provided. */\n   if test_table_name=\"\" then do; \n      print(\"No Test Table specified.  Using Training table for test.\");\n      test_table_name=training_table_name;\n      test_table_lib=training_table_lib;\n   end;    \n\n/* Train a text classifier for the given target variable */\n   textClassifier.trainTextClassifier /               \n      table={name=training_table_name, caslib=training_table_lib}\n      modelOut={name=model_table_name, caslib=model_table_lib, replace=True}\n      target=target_variable\n      text=text_variable\n      gpu={enable=&gpuEnabled. &deviceArgumentString.}\n      batchSize=&batchSize.\n      chunkSize=&chunkSize.\n      maxEpochs=&maxEpochs.\n      seed=&seedNumber.\n      testTable={name=test_table_name, caslib=test_table_lib}\n      validationPartitionFraction=&validationPartitionFraction.\n      validTable={name=validation_table_name, caslib=validation_table_lib}\n;\n\n/* Future placeholder : Persist Model Table */\n\nquit;  "}}