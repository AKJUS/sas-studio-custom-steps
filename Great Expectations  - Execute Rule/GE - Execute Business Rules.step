{"type":"code","name":"GE - Execute Business Rules.step","displayName":"GE - Execute Business Rules.step","description":"","templates":{"SAS":"/* SAS templated code goes here */\n\n\n/* Set debug options whether to write debugging information to log */\n%macro _dm_debugMacros;\n\n   %global _dm_resetDebug _dm_defaultsource _dm_defaultsymbolgen _dm_defaultmlogic _dm_defaultmprint _dm_defaultmlogicnest _dm_defaultmprintnest;\n\n   %let _dm_resetDebug = 0; \n   %let _dm_defaultsource = %sysfunc(getoption(source2));\n   %let _dm_defaultsymbolgen = %sysfunc(getoption(symbolgen)) ;\n   %let _dm_defaultmlogic= %sysfunc(getoption(mlogic));\n   %let _dm_defaultmprint= %sysfunc(getoption(mprint));\n   %let _dm_defaultmlogicnest= %sysfunc(getoption(mlogicnest));\n   %let _dm_defaultmprintnest= %sysfunc(getoption(mprintnest));\n\n   %if &_dm_debugMacro. eq 1 %then %do;\n      options source2 symbolgen mlogic mprint mlogicnest mprintnest;\n      /* Reset the flag for resetting debug options at the end of run */\n      %let _dm_resetDebug = 1;\n   %end;\n\n%mend _dm_debugMacros;\n\n%_dm_debugMacros;\n\n/* Create variables for great expectations suite */\n%macro _dm_create_input_variables;\n\n%global options;\n\n%if &_dm_filter_rules = column_rule %then %do;\n\t\n\t/* if the user chooses \"expect_column_distinct_values_to_be_in_set\" or \"expect_column_values_to_be_in_set\" or \"expect_column_values_to_not_be_in_set\"; */\n\t%if (&_dm_expectation_col = expect_column_distinct_values_to_be_in_set) or\n\t\t\t   (&_dm_expectation_col = expect_column_values_to_be_in_set) or\n\t\t\t    (&_dm_expectation_col = expect_column_values_to_not_be_in_set) %then %do;\n\t\n\t\t%let options = column = &_dm_column,\n\t                   value_set = &_dm_value_set,\n\t                   result_format = COMPLETE;\n\t%end;\n\n\t/* if the user chooses \"expect_column_max_to_be_between\" or \"expect_column_min_to_be_between\" or \"expect_column_mean_to_be_between\";*/\n\t%else %if (&_dm_expectation_col = expect_column_max_to_be_between) or\n\t\t\t\t(&_dm_expectation_col = expect_column_min_to_be_between) or \n\t\t\t\t (&_dm_expectation_col = expect_column_mean_to_be_between) or \n\t\t\t\t   (&_dm_expectation_col = expect_column_value_lengths_to_be_between) or \n\t\t\t\t     (&_dm_expectation_col = expect_column_median_to_be_between) or \n\t\t\t\t       (&_dm_expectation_col = expect_column_values_to_be_between) %then %do;\n\t\n\t\t%let options = column = &_dm_column, \n\t                   min_value = &_dm_min_value, \n\t                   max_value = &_dm_max_value,  \n\t                   result_format = COMPLETE;\t\t\n\t%end;\n\t\n\t/* if the user chooses \"expect_column_values_to_match_regex\";*/\n\t%else %if (&_dm_expectation_col = expect_column_values_to_match_regex) or\n\t\t\t\t(&_dm_expectation_col = expect_column_values_to_not_match_regex) %then %do;\n\t\t%let options = column = &_dm_column, \n\t\t\t\t\t   regex = &_dm_regex,\n\t                   result_format = COMPLETE;\t\t\n\t%end;\n\t\n\t/* if the user chooses \"expect_column_values_to_not_be_nullÂ \" */\n\t%else %do;\n\t\t%let options = column = &_dm_column, \n\t                   result_format = COMPLETE;\t\t\n\t%end;\n%end;\n\n%else %do; /*if _dm_filter_rules = table_rule*/\n\n\t/* if the user chooses \"expect_table_columns_to_match_set\"*/\n\t%if &_dm_expectation_tbl = expect_table_columns_to_match_set %then %do;\n\t\t%let options = column_set = &_dm_column_set, \n                        exact_match = &_dm_exact_match,\n                   \t\tresult_format = COMPLETE;\n\t%end;\n\t%else %if &_dm_expectation_tbl = expect_column_to_exist %then %do;\n\t\t%let options = column = &_dm_search_column, \n                   \t\tresult_format = COMPLETE;\n\t%end;\n%end;\n\n\n%mend;\n%_dm_create_input_variables;\n\n/* %put &=options;*/\n\n\nproc python;\nsubmit;\n\n#SAS.hideLOG(False)\n\nimport json\nimport numpy as np\nimport pandas as pd\nimport datetime\nimport great_expectations as gx\nfrom great_expectations.dataset import PandasDataset\n\n# Get system date and time \ndt = datetime.datetime.now()\n# dtime = dt.strftime('%m-%d-%Y')\ndtime = dt.strftime('%m-%d-%Y %H:%M:%S')\n\n\n#================= Create dictionary of options ===============================\n\ndef parse_options(options):\n    options_dict = {}\n    for opt in options.split(\", \"):\n        key, value = opt.split(\"=\")\n        value = value.strip()\n        \n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            # map values to correct data type based on their content\n            value_list = value[1:-1].split(\",\")\n            value = []\n            for v in value_list:\n                v = v.strip()\n                if v.isnumeric():\n                    value.append(int(v))\n                else:\n                    value.append(v)\n                    \n        elif value.startswith(\"{\") and value.endswith(\"}\"):\n            value = set(map(str.strip, value[1:-1].split(\",\")))\n        elif value.isnumeric():\n            value = int(value)      \n        else:\n            try:\n                value = float(value)\n            except ValueError:\n                options_dict[key] = value \n        options_dict[key] = value\n                \n    trimmed_dict = {key.strip(): value for key, value in options_dict.items()}        \n    return trimmed_dict\n\n#=================== Apply expectation to data =============================\n\ndef apply_expectation(dataset, expectation, options=None):\n    # Call the expectation dynamically using getattr\n    expectation_func = getattr(dataset, expectation)\n    \n    # Apply the expectation with the specified options(if provided)\n    if options is not None:\n        result = expectation_func(**options)\n    else:\n        result = expectation_func()\n\n    return result\n\n#=================== Provide output ========================================\n# Output table with gx_flag if a flag exists\ndef create_output(data, gx_json_obj, column_name):\n    # Find the failed record indices and return output as False\n    result = gx_json_obj['result']\n    gx_configuration = gx_json_obj['expectation_config']\n    if 'unexpected_index_list' in result:\n        index_list = result['unexpected_index_list']\n        data['gx_flag'] = ~data.index.isin(index_list)    \n    else:\n        data['gx_flag'] = True\n        \n    # for distinct set-type expectations   \n    if  'observed_value' in result and 'value_set' in gx_configuration['kwargs']:   \n        value_set = gx_configuration['kwargs']['value_set']\n        observed_set = result['observed_value']\n        exception_set = set(observed_set) - set(value_set) \n        data['gx_flag'] = np.where(data[column_name].isin(exception_set), False, True)\n\n    return data\n\n#=================Build output meta table ==============================\n# populate a list\ndef append_lists(alist_, blist_, name, value):\n    alist_.append(name)\n    blist_.append(value)\n    \n    return alist_, blist_\n    \n# Build a gx_meta dataframe\ndef build_meta_table(gx_json_obj):\n    gx_configuration = gx_json_obj['expectation_config']\n    result = gx_json_obj['result']\n    \n    data = dict()  \n    data['meta_name'] = []\n    data['meta_value'] = []\n    \n    # create a list of initial column name and values\n    column_name = ['expectation_type', 'success']\n    column_value = [gx_configuration['expectation_type'], gx_json_obj['success']] \n    \n    # populate the lists\n    kwarg_list = ['column','column_set','value_set','min_value','max_value','mostly']\n    \n    for item in kwarg_list:\n        if item in gx_configuration['kwargs']:\n            if item == 'value_set' or item == 'column_set':\n                value_set = \", \".join(str(value) for value in gx_configuration['kwargs'][item])\n                append_lists(column_name, column_value, item, value_set)\n            else:\n                append_lists(column_name, column_value, item, gx_configuration['kwargs'][item])\n        \n    list_of_args = ['observed_value', 'element_count', 'missing_count', 'missing_percent', 'unexpected_count']\n    \n    for item in list_of_args:\n        if item in result: \n            if item == 'observed_value':  \n                observed_value = result['observed_value']\n                if hasattr(observed_value, '__iter__') and type(observed_value) is not str:\n                    observed_value = \", \".join(str(value) for value in result['observed_value'])\n                append_lists(column_name, column_value, item, observed_value)\n            \n            elif item == 'unexpected_count':\n                list_ = ['unexpected_count','unexpected_percent','unexpected_percent_total','unexpected_percent_nonmissing']\n                for name in list_:\n                    if name in result:\n                        append_lists(column_name, column_value, name, result[name])     \n            else:\n                append_lists(column_name, column_value, item, result[item])\n                \n    for name, value in zip(column_name, column_value):\n        data['meta_name'].append(name)\n        data['meta_value'].append(value)\n    \n    df = pd.DataFrame(data) #.reset_index(drop=True)\n        \n    return df\n\ndef create_rules_report(dataframe):\n    # Structure of the rule`s report[`transaction_ID`, `meta_name`, `meta_value` ]\n    df_meta = pd.DataFrame({'transaction_ID': [], 'meta_name': [], 'meta_value': []}) \n    if df_meta.empty:\n        id = 1\n    else:\n        id = df_meta.iloc[-1]['transaction_ID'] + 1\n    \n    df_meta = pd.concat([df_meta, dataframe], axis=0, ignore_index=True)\n    df_meta['transaction_ID'] = df_meta['transaction_ID'].fillna(id)\n    \n    return df_meta\n\n#=================Build exception`s table ==============================\n\n# Merge tables functions for exception report\ndef merge_tbls(df, date, expectation_type, value, count):\n    data = pd.DataFrame({\n                'execution_datetime': date,\n                'execution_rule': expectation_type,\n                'exception_value': value,\n                'exception_count': count\n                }, index=[0])           \n    df = pd.concat([df, data], axis=0, ignore_index=True)\n    return df\n\n# Create exception table for as an output\ndef create_exception_table(df, date, gx_json_obj):\n    gx_configuration = gx_json_obj['expectation_config']\n    expectation_type = gx_configuration['expectation_type']\n    result = gx_json_obj['result']\n    \n    if 'partial_unexpected_counts' in result:\n        len_result = len(result['partial_unexpected_counts'])\n    \n        for i in range(len_result):\n            value = result['partial_unexpected_counts'][i]['value']\n            count = result['partial_unexpected_counts'][i]['count']           \n            df = merge_tbls(df, date, expectation_type, value, count) \n            \n    elif 'details' in result and 'value_set' in gx_configuration['kwargs']:\n        value_set = gx_configuration['kwargs']['value_set']\n        observed_set = result['observed_value']\n        exception_set = set(observed_set) - set(value_set)\n        \n        for item in result['details']['value_counts']:\n            if item['value'] in exception_set:\n                value = item['value']\n                count = item['count']\n                df = merge_tbls(df, date, expectation_type, value, count)   \n    else:\n        value = ''\n        count = ''\n        df = merge_tbls(df, date, expectation_type, value, count)\n        \n    return df\n\n#======================================================================================\n#------------- Load data and run expectations on the data------------------------------\n\n#===================== Load data as SAS table ========================= \n\nin_table = SAS.symget(\"_dm_input_table\")\ndf_in = SAS.sd2df(in_table)\ndf = PandasDataset(df_in)\n\n#===================== Create Expectations ==============================\n# determine the type of rule (column or table rule)\nrule_type = SAS.symget(\"_dm_filter_rules\")\nif rule_type == \"column_rule\":\n    expectation_dm = SAS.symget(\"_dm_expectation_col\")\nelse:\n\texpectation_dm = SAS.symget(\"_dm_expectation_tbl\")\n# print(expectation_dm)\n\noptions = SAS.symget(\"options\")\noptions = options.replace(\"'\", \"\").replace('\"', '')\noptions_dict = parse_options(options)\nif 'mostly' in options_dict:\n    if options_dict['mostly'] == '':\n        options_dict['mostly'] = None\nprint(options_dict)\n\nexpectation_outcome = apply_expectation(\n                            dataset = df, \n\t\t\t\t  \t\t\texpectation = expectation_dm,\n\t\t\t\t  \t\t\toptions = options_dict\n\t\t\t\t\t\t)\n\nprint(expectation_outcome)\n\ngx_obj = json.loads(str(expectation_outcome))\ngx_out = pd.json_normalize(gx_obj)\nprint(gx_obj)\n\n#=================== Export Tables as Output =================================\n\n# Define the output method based on the rule-filter\n\nif rule_type == \"column_rule\":\n    \"\"\"\n       This section of code should be modified in the case of building an expectation suite.\n        - get the transaction_id of the the previous expectation run and build the meta table- \n    \"\"\"\n    # create good and bad records\n    column_name = options_dict['column']\n    df_out = create_output(df, gx_obj, column_name)  # output data with returned flags\n    df_good = df_out[df_out['gx_flag'] == True].drop('gx_flag', axis=1) # inplace=True\n    # df_good = df_good.drop('gx_flag', axis=1) \n    df_bad = df_out[df_out['gx_flag'] == False].drop('gx_flag', axis=1)\n    # df_bad = df_bad.drop('gx_flag', axis=1)\n\n    # print(df_out.head())\n    SAS.df2sd(df_good, SAS.symget('_dm_good_records'), overwrite=True)\n    SAS.df2sd(df_bad, SAS.symget('_dm_bad_records'), overwrite=True)\n\n\n# create rules-report table \ngx_meta_df = build_meta_table(gx_obj)   # gx meta data\ndf_meta = create_rules_report(gx_meta_df)\nSAS.df2sd(df_meta, SAS.symget('_dm_rule_report'), overwrite=True)\n\n# create exceptions table\ndf_exception = pd.DataFrame({'execution_datetime': [], 'execution_rule': [], 'exception_value': [], 'exception_count': [],})\ndf_exception = create_exception_table(df_exception, dtime, gx_obj)\nSAS.df2sd(df_exception, SAS.symget('_dm_exceptions'), overwrite=True)\n\n\n#SAS.printLOG()\n\nconfig = df.get_expectation_suite()\nprint(config)\n\n\nendsubmit;\nquit;\n\n\n/*   Reset debug options to not write debugging information to log at the end of run */\n%macro _dm_resetDebugMacros;\n   %if &_dm_resetDebug. eq 1 %then %do;\n      options &_dm_defaultsource. &_dm_defaultsymbolgen. &_dm_defaultmlogic. &_dm_defaultmprint. &_dm_defaultmlogicnest. &_dm_defaultmprintnest.;\n   %end;\n%mend _dm_resetDebugMacros;\n\n%_dm_resetDebugMacros;\n\n\n\n\n"},"properties":{},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"greatExpectations\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Create Rule(s)\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_dm_input_table\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Input table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_dm_expectatiions\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Great Expectations\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_dm_filter_rules\",\n\t\t\t\t\t\t\t\"type\": \"radiogroup\",\n\t\t\t\t\t\t\t\"label\": \"Rule filter:\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"column_rule\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Column rule\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"table_rule\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Table rule\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_dm_column\",\n\t\t\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\t\t\"label\": \"Select a column:\",\n\t\t\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\t\t\"max\": 1,\n\t\t\t\t\t\t\t\"min\": 1,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"column_rule\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"table\": \"_dm_input_table\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_dm_expectation_col\",\n\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\"label\": \"Select an expectation to apply - column rules:\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"expect_column_values_to_be_in_set\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Values to be in a given set\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"expect_column_values_to_not_be_in_set\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Values to not be in a given set\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"expect_column_distinct_values_to_be_in_set\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Distinct values to be contained by a given set\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"expect_column_values_to_be_between\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Values to be between a min/max\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"expect_column_mean_to_be_between\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Mean value to be between a min/max\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"expect_column_median_to_be_between\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Median value to be between a min/max\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"expect_column_max_to_be_between\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Maximum value to be between a min/max\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"expect_column_min_to_be_between\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Minimum value to be between a min/max\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"expect_column_value_lengths_to_be_between\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Length of values to be between min/max\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"expect_column_values_to_match_regex\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Values to match like pattern\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"expect_column_values_to_not_match_regex\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Values to not match like pattern\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"expect_column_values_to_not_be_null\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Values to not be null\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"column_rule\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_dm_expectation_tbl\",\n\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\"label\": \"Select an expectation to apply - table rules:\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"expect_table_columns_to_match_set\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Table columns to match a given set\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"expect_column_to_exist\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Column exists\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"table_rule\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_dm_expectation_options\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Options\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"$_dm_filter_rules\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_dm_min_value\",\n\t\t\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\t\t\"label\": \"Minimum value:\",\n\t\t\t\t\t\t\t\"placeholder\": \"None\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\t\t\"min\": null,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"column_rule\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"expect_column_values_to_be_between\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"expect_column_max_to_be_between\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"expect_column_min_to_be_between\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"expect_column_mean_to_be_between\"\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"expect_column_value_lengths_to_be_between\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"expect_column_median_to_be_between\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_dm_max_value\",\n\t\t\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\t\t\"label\": \"Maximum value:\",\n\t\t\t\t\t\t\t\"placeholder\": \"None\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"max\": null,\n\t\t\t\t\t\t\t\"min\": null,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"column_rule\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"expect_column_values_to_be_between\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"expect_column_max_to_be_between\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"expect_column_min_to_be_between\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"expect_column_mean_to_be_between\"\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"expect_column_value_lengths_to_be_between\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"expect_column_median_to_be_between\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_dm_value_set\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Value set, e.g., [2,3,4], {a,b,c}, and {\\\"a\\\",'b',c} without spaces:\",\n\t\t\t\t\t\t\t\"placeholder\": \"None\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"column_rule\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"expect_column_distinct_values_to_be_in_set\"\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"expect_column_values_to_be_in_set\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"expect_column_values_to_not_be_in_set\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_dm_regex\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Match pattern - regex:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"column_rule\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"expect_column_values_to_match_regex\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$_dm_expectation_col\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"expect_column_values_to_not_match_regex\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_dm_search_column\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Column to search:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"table_rule\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$_dm_expectation_tbl\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"expect_column_to_exist\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_dm_column_set\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Column match set - {col1,col2,...}:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"table_rule\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$_dm_expectation_tbl\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"expect_table_columns_to_match_set\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"_dm_exact_match\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Exact match - Boolean\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"table_rule\"\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$_dm_expectation_tbl\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"expect_table_columns_to_match_set\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"_dm_output\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Output \",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_dm_good_records\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Good records:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\"column_rule\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_dm_bad_records\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Bad records:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\"column_rule\"\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_dm_exceptions\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Exceptions:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\"column_rule\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\"table_rule\"\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_dm_rule_report\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Rules report:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\"column_rule\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\"$_dm_filter_rules\",\n\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\"table_rule\"\n\t\t\t\t\t\t]\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"dbug\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Debug\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"_dm_debugMacro\",\n\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\"label\": \"Debug SAS Macro\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"intro\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"GE - Execute Business Rules.step\\n=========\\n\\nThe \\\"GE - Execute Business Rules\\\" Custom Step enables SAS Studio Flow users to run business rules on data based on the Python Great Expectations package. This Custom Step is employed to measure the quality of data in terms of data accuracy, validity, completeness, uniqueness, and timelines. Generally, business rules produce a single result, whether the rule \\\"fired\\\" successfully (True) or not (False), indicating if the data meets the expectations of the rule.\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section1\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Parameters and outputs\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Create Rules tab:\\n* The rules filter allows a user to select either a column rule or a table rule. \\n* In the options section, options that require an array of inputs such as 'Value set' could have inputs such as [2,3,4] for numeric values, {a,b,c}, and {\\\"a\\\",'b',c} for string/character values. In these cases there should not be spaces between the arrays.\\n\\nOutput Tables:\\n* Good records table - contains records that meet the rules's criteria\\n* Bad records - contains records that failed the rules's criteria\\n* Exceptions table - details statistics of the failed records and what rule has fired\\n* Rules report - parsing out the GE's .json output as an output table\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section2\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Pre-requisites\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text4\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"- Built and tested on SAS Viya Stable Release 2023.04.\\n- Python's great_expectations library version v0.15.0 or after\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section3\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Changelog\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text3\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"* Version 1.1 (11OCT2023)\\n  - Renaming the .step file and adding 'About' tab.\\n\\n* Version: 1.0 (28APR2023)\\n  - Initial version\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"_dm_input_table\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"_dm_filter_rules\": {\n\t\t\t\"value\": \"column_rule\",\n\t\t\t\"label\": \"Column rule\"\n\t\t},\n\t\t\"_dm_column\": [],\n\t\t\"_dm_expectation_col\": null,\n\t\t\"_dm_expectation_tbl\": null,\n\t\t\"_dm_min_value\": null,\n\t\t\"_dm_max_value\": null,\n\t\t\"_dm_value_set\": null,\n\t\t\"_dm_regex\": \"\",\n\t\t\"_dm_search_column\": \"\",\n\t\t\"_dm_column_set\": \"\",\n\t\t\"_dm_exact_match\": \"\",\n\t\t\"_dm_good_records\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"_dm_bad_records\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"_dm_exceptions\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"_dm_rule_report\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"_dm_debugMacro\": false\n\t}\n}","flowMetadata":{"inputPorts":[{"name":"_dm_input_table","displayName":"_dm_input_table","description":"","minEntries":1,"maxEntries":1,"type":"table"}],"outputPorts":[{"name":"_dm_good_records","displayName":"_dm_good_records","description":"","minEntries":1,"maxEntries":1,"columnDelta":null,"type":"table"},{"name":"_dm_bad_records","displayName":"_dm_bad_records","description":"","minEntries":1,"maxEntries":1,"columnDelta":null,"type":"table"},{"name":"_dm_exceptions","displayName":"_dm_exceptions","description":"","minEntries":1,"maxEntries":1,"columnDelta":null,"type":"table"},{"name":"_dm_rule_report","displayName":"_dm_rule_report","description":"","minEntries":1,"maxEntries":1,"columnDelta":null,"type":"table"}]}}