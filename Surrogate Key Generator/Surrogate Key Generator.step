{"type":"code","name":"Surrogate Key Generator.step","displayName":"Surrogate Key Generator.step","description":"","templates":{"SAS":"/*==========================================================================* \n * Custom Step:     Surrogate Key Generator                                 * \n * Transform:       Surrogate Key Generator                                 * \n * Description:     Generates a unique key value for a set of business key  * \n *                   values.                                                * \n *==========================================================================*/\n%macro etls_recordCheck;\n\t%let etls_recCheckExist = %eval(%sysfunc(exist(&inputtable1, DATA)) or \n\t\t%sysfunc(exist(&inputtable1, VIEW)));\n\n\t%if (&etls_recCheckExist) %then %do;\n\t\t%local etls_syntaxcheck;\n\t\t%let etls_syntaxcheck = %sysfunc(getoption(syntaxcheck));\n\n\t\t/* Turn off syntaxcheck option to perform following steps  */\n\t\toptions nosyntaxcheck;\n\n\t\tproc contents data = &inputtable1 out = work.etls_contents(keep = nobs) noprint;\n\t\trun;\n\n\t\tdata _null_;\n\t\t\tset work.etls_contents (obs = 1);\n\t\t\tcall symput(\"etls_recnt\", left(put(nobs,32.)));\n\t\trun;\n\n\t\tproc datasets lib = work nolist nowarn memtype = (data view);\n\t\t\tdelete etls_contents;\n\t\tquit;\n\n\t\t/* Reset syntaxcheck option to previous setting  */\n\t\toptions &etls_syntaxcheck;\n\t%end;\n%mend etls_recordCheck;\n\n%etls_recordCheck;\n\n%macro createSurrogateKey;\n\t%local etls_maxkey i;\n\t%global businessKey_name surrogateKey_name surrogateKey;\n\t%let businessKey_name=;\n\t%let surrogateKey=&surrogateKey_name;\n\toptions mprint;\n\n\t%do i=1 %to &businessKey_count;\n\t\t%let businessKey_name = &businessKey_name &&businessKey_&i._name;\n\t%end;\n\n\t%if (%nrquote(&outputtable1) ne ) %then %do;\n\t\t%let targetTable = &outputtable1;\n\t%end;\n\n\t%if (%nrquote(&targetTable) eq) %then %do;\n\t\t%put ERROR: Missing Target Table Option;\n\t\t%let sysrc=8000;\n\t\t%goto out;\n\t%end;\n\n\t%if (%nrquote(&surrogateKey) eq) %then %do;\n\t\t\n\t\t%put ERROR: Missing Surrogate Key Column Option;\n\t\t%let sysrc=8000;\n\t\t%goto out;\n\t%end;\n\n\t%if (%nrquote(&businessKey_name) eq) %then %do;\n\t\t%put ERROR: Missing Business Key Column Option;\n\t\t%let sysrc=8000;\n\t\t%goto out;\n\t%end;\n\n\tproc sort data = &inputtable1 \n\t\tout = work.etls_sortedSource\n\t;\n\t\tby &businessKey_name;\n\trun;\n\n\t%if %sysfunc(exist(&targetTable)) eq 1 %then %do;\n\t\t/* If physical target table exists, look up maximum surrogate key value used \n\t\t*/\n\t\tproc sql noprint;\n\t\t\tselect compress(put(max(&surrogateKey), best32.)) into :etls_maxKey \n\t\t\t\tfrom &targetTable;\n\t\tquit;\n\n\t\t%if &syserr gt 0 and &syserr ne 4 %then %do;\n\t\t\t%rcset(&syserr);\n\t\t\t%put ERROR: Failed to get highest surrogate key value from column: &surrogateKey  in table: &targetTable;\n\t\t\t%goto out;\n\t\t%end;\n\t%end;\n\n\t%if (&etls_maxkey eq . or &etls_maxkey eq) %then\n\t\t%let etls_maxkey = 0;\n\t%put &etls_maxkey;\n\n\t%if %sysfunc(exist(&targetTable)) eq 1 %then %do;\n\n\t\tproc sort data=&targetTable out = work.etls_targetSorted;\n\t\t\tby &businessKey_name;\n\t\trun;\n\n\t\t%if &syserr gt 0 and &syserr ne 4 %then %do;\n\t\t\t%rcset(&syserr);\n\t\t\t%put ERROR: &syserr. Sort of &targetTable  failed, so it will not be replaced;\n\t\t\t%goto out;\n\t\t%end;\n\n\t\tproc datasets lib = %scan(&targetTable,1,.) nolist nowarn memtype = (data view);\n\t\t\tdelete %scan(&targetTable,2,.);\n\t\tquit;\n\n\t\tdata &targetTable;\n\t\t\tmerge \n\t\t\t\twork.etls_targetSorted(in = etls_inTarget)\n\t\t\t\twork.etls_sortedSource end=etls_lastRecord;\n\t\t\tby &businessKey_name;\n\t\t\tretain etls_newkey &etls_maxkey;\n\t\t\tdrop etls_newkey  etls_inTarget etls_lastRecord;\n\n\t\t\t/* If just keeping input records, then when a record is read that is not in input table, return */\n\t\t\t/* without saving the record. */\n\t\t\tif not etls_inTarget then do;\n\t\t\t\tetls_newkey + 1;\n\t\t\t\t&surrogateKey = etls_newkey;\n\t\t\tend;\n\n\t\t\tif etls_lastRecord then\n\t\t\t\tcall symput('etls_maxkey', trim(left(put(etls_newkey,15.))));\n\t\trun;\n\n\t\tproc datasets lib = work nolist nowarn memtype=(data view);\n\t\t\tdelete etls_targetSorted;\n\t\tquit;\n\n\t\tproc datasets lib = work nolist;\n\t\t\tdelete etls_sortedSource;\n\t\tquit;\n\n\t%end;\n\t%else %do;\n\t\t/* Target table does not exist yet. */\n\t\tdata &targetTable;\n\t\t\tset etls_sortedSource end=etls_lastRecord;\n\t\t\tby &businessKey_name;\n\t\t\tretain etls_newkey &etls_maxkey;\n\t\t\tdrop etls_newkey etls_lastRecord;\n\n\t\t\t/* If just keeping input records, then when a record is read that is not in input table, return */\n\t\t\t/* without saving the record. */\n\t\t\tetls_newkey + 1;\n\t\t\t&surrogateKey = etls_newkey;\n\n\t\t\tif etls_lastRecord then\n\t\t\t\tcall symput('etls_maxkey', trim(left(put(etls_newkey,15.))));\n\t\trun;\n\n\t\tproc datasets lib = work nolist;\n\t\t\tdelete etls_sortedSource;\n\t\tquit;\n \t%end;\n\n%out:\n%mend;\n\n%createSurrogateKey;"},"properties":{},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Data\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"inputtable1\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Select input table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"outputtable1\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Select output table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section_input\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Surrogate Key Generator\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"businessKey\",\n\t\t\t\t\t\t\t\"type\": \"columnselector\",\n\t\t\t\t\t\t\t\"label\": \"Business Key\",\n\t\t\t\t\t\t\t\"table\": \"inputtable1\",\n\t\t\t\t\t\t\t\"order\": false,\n\t\t\t\t\t\t\t\"columntype\": \"a\",\n\t\t\t\t\t\t\t\"max\": 20,\n\t\t\t\t\t\t\t\"min\": 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"surrogateKey\",\n\t\t\t\t\t\t\t\"type\": \"newcolumn\",\n\t\t\t\t\t\t\t\"label\": \"Surrogate Key\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"hideproperties\": false,\n\t\t\t\t\t\t\t\"readonly\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"inputtable1\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"businessKey\": [],\n\t\t\"surrogateKey\": {\n\t\t\t\"value\": \"surrogate_key\",\n\t\t\t\"type\": \"n\",\n\t\t\t\"length\": 8\n\t\t}\n\t}\n}","flowMetadata":{"inputPorts":[{"name":"inputtable1","displayName":"inputtable1","minEntries":1,"maxEntries":1,"type":"table"}],"outputPorts":[{"name":"outputtable1","displayName":"outputtable1","description":"","minEntries":1,"maxEntries":1,"columnDelta":{"automaticMapping":[{"inputPort":"inputtable1"}],"removeColumnArguments":[],"keepColumnArguments":[],"updateColumnArguments":["surrogateKey"]},"type":"table"}]}}