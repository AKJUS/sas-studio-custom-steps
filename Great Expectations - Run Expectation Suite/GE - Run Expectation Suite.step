{"type":"code","name":"RunExpectations.step","displayName":"RunExpectations.step","description":"","templates":{"SAS":"%macro set_up_dirs();\n\n%global dataPath folder disk;\n%let dataPath = %sysfunc(getoption(work));\n\n/* Great Expectations expects a specific directory structure, we create it here */\noptions dlcreatedir;\nlibname newdir \"&dataPath./great_expectations\";\nlibname check \"&dataPath./great_expectations/checkpoints\";\nlibname exp \"&dataPath./great_expectations/expectations\";\nlibname plug \"&dataPath./great_expectations/plugins\";\nlibname prof \"&dataPath./great_expectations/profilers\";\nlibname uncom \"&dataPath./great_expectations/uncommitted\";\n\n/* now turn off the dlcreatedir option */\noptions nodlcreatedir;\n\n%mend set_up_dirs;\n\n%set_up_dirs();\n\nproc python;\n   submit;\n# get location in usable format, is input as drive:/path/to/output and need to be /path/to/output\nlocation = SAS.symget(\"location\")\nfolder = location[location.find(\":\")+1:]\ndisk = location.split(\":\")[0]\nSAS.symput(\"folder\",folder)\nSAS.symput(\"disk\",disk)\n   endsubmit;\nrun;\n\n%macro migrate_files();\n%if \"&disk\" eq \"sascontent\" %then %do;\n   filename source filesrvc folderPath=\"&folder\" Filename=\"great_expectations.yml\";\n%end;\n%else %do;\n   filename source \"&folder./great_expectations.yml\";\n%end;\nfilename desti \"%sysfunc(getoption(work))/great_expectations/great_expectations.yml\";\n%let rc = %sysfunc(fcopy(source, desti));\nfilename source clear;\nfilename desti clear;\n%if \"&disk\" eq \"sascontent\" %then %do;\n   filename source filesrvc folderPath=\"&folder\" Filename=\"&suiteName..json\";\n%end;\n%else %do;\n   filename source \"&folder./&suiteName..json\";\n%end;\nfilename desti \"%sysfunc(getoption(work))/great_expectations/expectations/&suiteName..json\";\n%let rc = %sysfunc(fcopy(source, desti));\nfilename desti clear;\nfilename source clear;\n%mend migrate_files;\n\n%migrate_files();\n\nproc python;\n   submit;\n\nimport great_expectations as gx\nimport os\nimport pandas as pd\nimport numpy as np\nfrom great_expectations.core.batch import RuntimeBatchRequest\nfrom great_expectations.core.yaml_handler import YAMLHandler\nimport json\nimport datetime\n\n# get time of run\ndt = datetime.datetime.now()\ndtime = dt.strftime('%m-%d-%Y %H:%M:%S')\n\n# change this to match path to directory\npath_to_dir = SAS.symget('dataPath') # will need to change to location? may not be able to change to location...\n\n# set up data context\ncontext = gx.get_context(context_root_dir = path_to_dir + '/great_expectations')\n\n# get data\ndf = SAS.sd2df(SAS.symget(\"inputTable\"), method='CSV');\n\n# set up datasource\nyaml = YAMLHandler()\n\ndatasource_yaml = f\"\"\"\nname: my_datasource\nclass_name: Datasource\nmodule_name: great_expectations.datasource\nexecution_engine:\n  module_name: great_expectations.execution_engine\n  class_name: PandasExecutionEngine\ndata_connectors:\n    my_runtime_data_connector:\n        class_name: RuntimeDataConnector\n        batch_identifiers:\n            - id\n\"\"\"\n# add datasource to data context\ncontext.add_datasource(**yaml.load(datasource_yaml))\n\n# set up variables for batch request\nsuite_name = SAS.symget(\"suiteName\")\ndata_asset_name = 'your_data_asset_name'\nbatch_id = '1' # from batch request that made expectation suite\n\n# set up batch request\nbatch_request = RuntimeBatchRequest(\n   datasource_name=\"my_datasource\",\n   data_connector_name=\"my_runtime_data_connector\",\n   data_asset_name=data_asset_name,\n   runtime_parameters={\"batch_data\": df},\n   batch_identifiers={\n      \"id\": batch_id,\n   },\n)\n\n# context.run_checkpoint method looks for checkpoint file on disk.  Create one...\ncheckpoint_name = 'check'\ncheckpoint_path = os.path.abspath(f'{path_to_dir}/great_expectations/checkpoints/{checkpoint_name}.yml')\ncheckpoint_yml = f'''\nname: {checkpoint_name}\nconfig_version: 1\nclass_name: SimpleCheckpoint\nexpectation_suite_name: {suite_name}\nruntime_configuration:\n        result_format:\n            result_format: COMPLETE\n'''\nwith open(checkpoint_path, 'w') as f:\n   f.write(checkpoint_yml)\n\n# now run the checkpoint\nresult = context.run_checkpoint(\n   checkpoint_name=checkpoint_name,\n   validations=[{\"batch_request\": batch_request, 'expectation_suite_name': suite_name}, ],\n)\n\n# make a table to show how the data performed against this suite\njson_data = result\nrun_results = json_data['run_results']\nval_results= run_results[list(run_results.keys())[0]]\n#action_results = val_results['actions_results']\nval_results = val_results['validation_result']\nsuite_stats = val_results['statistics'] # and this becomes out suite_report when put into df\nsuite_dict ={'meta_name':['evaluated_expectations','successful_expectations',\n                          'unsuccessful_expectations','success_percent'],\n             'meta_value':[suite_stats['evaluated_expectations'],suite_stats['successful_expectations'],\n                           suite_stats['unsuccessful_expectations'],suite_stats['success_percent']]}\nsuiteReport = pd.DataFrame(suite_dict)\nSAS.df2sd(suiteReport, SAS.symget('suiteReport'), overwrite=True)\n\n# make tables so show which expectations were failed and which succeeded\nresults = json.loads(str(val_results))\nmeta_results = pd.json_normalize(results['results'])\ngood_expectations = {}\nbad_expectations = {}\nfor i in range(len(meta_results['success'])):\n   exp = meta_results['expectation_config.expectation_type'][i]\n   if 'table' in exp:\n      col = 'Table Expectation'\n   else:\n      col = meta_results['expectation_config.kwargs.column'][i]\n   if meta_results['success'][i] == True:\n      if exp in good_expectations:\n         good_expectations[exp].append(col)\n      else:\n         good_expectations[exp] = []\n         good_expectations[exp].append(col)\n   else: # expectation failed\n      if exp in bad_expectations:\n         bad_expectations[exp].append(col)\n      else:\n         bad_expectations[exp] = []\n         bad_expectations[exp].append(col)\n            \ngood_expectations_format = {}\nbad_expectations_format = {}\nfor entry in good_expectations: # formatting\n   good_expectations_format[entry] = ', '.join(map(str, good_expectations[entry]))\nfor entry in bad_expectations: # formatting\n   bad_expectations_format[entry] = ', '.join(map(str, bad_expectations[entry]))\ngood_df = pd.DataFrame(list(good_expectations_format.items()), columns=['expectation', 'columns'])\nbad_df = pd.DataFrame(list(bad_expectations_format.items()), columns=['expectation', 'columns'])\nprint(good_df)\nSAS.df2sd(good_df, SAS.symget('goodExp'), overwrite=True)\nSAS.df2sd(bad_df, SAS.symget('badExp'), overwrite=True)\n\n# get table for flags\nout_df = df # copy original data\nout_df['gx_flag'] = False\n\n# make dataframe for exceptions\ndf_exception = pd.DataFrame({'execution_datetime': [], 'execution_rule': [], 'column': [], 'exception_value': [], 'exception_count': [],})\n\n# put flag if if in index list\ndef create_output(data, index_list, column_name):\n   if np.isnan(index_list).any() == False:\n      for ind in index_list:\n         data['gx_flag'][ind] = 1\n   return data\n\n# get exceptions table\ndef merge_tbls(df, date, expectation_type, column, value, count):\n   data = pd.DataFrame({\n                'execution_datetime': date,\n                'execution_rule': expectation_type,\n                'column': column,\n                'exception_value': value,\n                'exception_count': count\n                }, index=[0])           \n   df = pd.concat([df, data], axis=0, ignore_index=True)\n   return df\n\n# Create exception table for an output (ignores quantiles)\ndef create_exception_table(df, date, expectation, column, unexpected_counts):\n   if type(unexpected_counts) != float:\n      for i in range(len(unexpected_counts)):\n         value = unexpected_counts[i]['value']\n         count = unexpected_counts[i]['count']           \n         df = merge_tbls(df, date, expectation, column, value, count) \n   return df\n\nfor exp in range(len(meta_results)): # loop through all expectations\n   out_df = create_output(out_df, meta_results['result.unexpected_index_list'][exp], meta_results['expectation_config.kwargs.column'][exp])\n   df_exception = create_exception_table(df_exception, dtime, meta_results['expectation_config.expectation_type'][exp], meta_results['expectation_config.kwargs.column'][exp], meta_results['result.partial_unexpected_counts'][exp])\n\ngood_rec = out_df[out_df['gx_flag'] == False]\ngood_rec = good_rec.drop('gx_flag', axis=1)\nbad_rec = out_df[out_df['gx_flag'] == True]\nbad_rec = bad_rec.drop('gx_flag', axis=1)\nSAS.df2sd(good_rec, SAS.symget('goodRecords'), overwrite=True)\nSAS.df2sd(bad_rec, SAS.symget('badRecords'), overwrite=True)\n\nSAS.df2sd(df_exception, SAS.symget('exceptions'), overwrite=True)\n\n   endsubmit;\nrun;\n\n%macro clean_up();\n/* clean up work library */\ndata _null_;\n    fname=\"dataset\";\n    rc=filename(fname,\"dataset.csv\");\n    if rc = 0 and fexist(fname) then\n       rc=fdelete(fname);\n    rc=filename(fname);\nrun;\n%mend clean_up;\n\n%clean_up();\n\nproc python;\n   submit;\n# delete the generated great_expectations directory\nimport os, shutil\nfolder = SAS.symget(\"dataPath\")+'/great_expectations'\nfor filename in os.listdir(folder):\n   file_path = os.path.join(folder, filename)\n   try:\n      if os.path.isfile(file_path) or os.path.islink(file_path):\n         os.unlink(file_path)\n      elif os.path.isdir(file_path):\n         shutil.rmtree(file_path)\n   except Exception as e:\n      print('Failed to delete %s. Reason: %s' % (file_path, e))\nshutil.rmtree(folder)\n   endsubmit;\nrun;\n"},"properties":{},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page1\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Run Expectations\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"inputTable\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Input table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"location\",\n\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\"label\": \"Select folder where files output by GE - Generate Expectations Suite will be found:\",\n\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"suiteReport\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Suite report:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"goodExp\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Successful expectations:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"badExp\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Failed expectations:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"goodRecords\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Good records:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"badRecords\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Bad records:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"exceptions\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Exception table:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"suiteName\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Input name of expectation suite to run:\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"page2\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"GE - Run Expectation Suite.step\\n=========\\n\\nThe \\\"GE - Run Expectation Suite\\\" Custom Step enables SAS Studio Flow users to compare datasets to the Python Great Expectations (GE) expectation suites created by the \\\"Generate Expectation Suite\\\" Custom Step. This custom step requires the output files of the \\\"Generate Expectations\\\" step (an expectation suite .json file and a data context .yml file), and the location where these are stored. This step returns a series of tables reporting on how the input data preformed against the expectation suite.\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section1\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Pre-requisites\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"* Built and tested on SAS Viya Stable Release 2023.04.\\n* Python's great_expectations library version v0.16.8 or after\\n* The output .json expectation suite file from running \\\"Generate Expectation Suite\\\"\\n* The output great_expectations.yml file from running \\\"Generate Expectation Suite\\\"\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section2\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Documention\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text3\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Components of this custom step are:\\n* Folder selector: Select the directory where the expectation suite .json and the great_expectations.yml files output by the \\\"Generate Expectations\\\" custom step are stored.\\n* Expectation suite name: The name of the expectation suite that should be used, omitting the file extension .json, so if the expectation suite has been saved as taxi_exp.json the custom step expects an input of taxi_exp.\\n\\nOutputs of this custom step are:\\n* Suite report: Summary of statistics on how the data performed against the expectation suite (number of expectation evaluated, number of expectations passed, number of expectations failed, percent success).\\n* Good expectations: Summary of which expectations (and their corresponding columns) that were successful.\\n* Bad expectations: Summary of which expectations (and their corresponding columns) that were unsuccessful.\\n* Good records: Contains records that meet the expectation suite's criteria.\\n* Bad records: Contains records that do not meet the expectation suite's criteria.\\n* Exceptions: Details statistics of the failed records and what rules have failed.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section3\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Changelog\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text4\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"* Version 1.0 (12OCT2023)\\n   - Initial version\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"inputTable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"location\": \"\",\n\t\t\"suiteReport\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"goodExp\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"badExp\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"goodRecords\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"badRecords\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"exceptions\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"suiteName\": \"\"\n\t}\n}","flowMetadata":{"inputPorts":[{"name":"inputTable","displayName":"inputTable","description":"","minEntries":1,"maxEntries":1,"type":"table"}],"outputPorts":[{"name":"suiteReport","displayName":"suiteReport","description":"","minEntries":1,"maxEntries":1,"columnDelta":null,"type":"table"},{"name":"goodExp","displayName":"goodExp","description":"","minEntries":1,"maxEntries":1,"columnDelta":null,"type":"table"},{"name":"badExp","displayName":"badExp","description":"","minEntries":1,"maxEntries":1,"columnDelta":null,"type":"table"},{"name":"goodRecords","displayName":"goodRecords","description":"","minEntries":1,"maxEntries":1,"columnDelta":null,"type":"table"},{"name":"badRecords","displayName":"badRecords","description":"","minEntries":1,"maxEntries":1,"columnDelta":null,"type":"table"},{"name":"exceptions","displayName":"exceptions","description":"","minEntries":1,"maxEntries":1,"columnDelta":null,"type":"table"}]}}