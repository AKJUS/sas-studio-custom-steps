{"creationTimeStamp":"2023-01-17T11:08:01.209Z","modifiedTimeStamp":"2023-01-25T15:54:03.721Z","createdBy":"alfredo","modifiedBy":"alfredo","name":"ADLSFileReader.step","displayName":"ADLSFileReader.step","localDisplayName":"ADLSFileReader.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/3671a569-c1e9-49f1-93df-8c152034212b","uri":"/dataFlows/steps/3671a569-c1e9-49f1-93df-8c152034212b","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/3671a569-c1e9-49f1-93df-8c152034212b","uri":"/dataFlows/steps/3671a569-c1e9-49f1-93df-8c152034212b","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/3671a569-c1e9-49f1-93df-8c152034212b","uri":"/dataFlows/steps/3671a569-c1e9-49f1-93df-8c152034212b","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/3671a569-c1e9-49f1-93df-8c152034212b","uri":"/dataFlows/steps/3671a569-c1e9-49f1-93df-8c152034212b"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/3671a569-c1e9-49f1-93df-8c152034212b","uri":"/dataFlows/steps/3671a569-c1e9-49f1-93df-8c152034212b","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/3671a569-c1e9-49f1-93df-8c152034212b","uri":"/dataFlows/steps/3671a569-c1e9-49f1-93df-8c152034212b","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[],"outputPorts":[{"name":"outtblid_dest","displayName":"outtblid_dest","localDisplayName":"outtblid_dest","minEntries":1,"maxEntries":1,"type":"table","requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"pageConnection\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Connection Settings\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectCredentials\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"ADLS Credentials\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"intextTenantId\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"placeholder\": \"Type the TentantID\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"intextClientid\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"placeholder\": \"Type the ClientID\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"intextClientSec\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"placeholder\": \"Type the ClientSecret\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectStorageOpts\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Storage Options\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"intextStorageAccount\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"placeholder\": \"Type the StorageAccount\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"intextContainer\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"placeholder\": \"Type the Container\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"intextFilePath\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"placeholder\": \"Type the Path\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"dpdownFormat\",\n\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\"label\": \"File Format\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"parquet\",\n\t\t\t\t\t\t\t\t\t\"label\": \"parquet\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"outtblid_dest\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"destination\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"pgFilterOpts\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Filtering\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"chkPartitioned\",\n\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\"label\": \"Apply Filter\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectFilterConditions\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Filter Conditions\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"$chkPartitioned\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"dpdownConditions\",\n\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\"label\": \"Filtering Conditions\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"1\",\n\t\t\t\t\t\t\t\t\t\"label\": \"1\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"2\",\n\t\t\t\t\t\t\t\t\t\"label\": \"2\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"3\",\n\t\t\t\t\t\t\t\t\t\"label\": \"3\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": \"$chkPartitioned\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"sectFilterCondition1\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Filter Condition\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextPartFieldCond1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Field\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"chkIsNumCond1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Is Number\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"dpdownOperatorsCond1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"neq\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Not equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"lt\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Less than\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"lte\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Less than or equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"gt\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Greater than\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"gte\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Greater than or equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"btw\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Between\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextCond1Val1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"textBtwCond1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"      And\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownOperatorsCond1\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"btw\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextCond1Val2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownOperatorsCond1\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"btw\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"dpdownOp1\",\n\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Or\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Or\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"And\",\n\t\t\t\t\t\t\t\t\t\"label\": \"And\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"sectFilterCondition2\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Filter Condition\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextPartFieldCond2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Field\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"chkIsNumCond2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Is Number\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"dpdownOperatorsCond2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"neq\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Not equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"lt\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Less than\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"lte\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Less than or equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"gt\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Greater than\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"gte\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Greater than or equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"btw\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Between\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextCond2Val1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"textBtwCond2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"      And\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownOperatorsCond2\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"btw\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextCond2Val2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownOperatorsCond2\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"btw\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"dpdownOp2\",\n\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Or\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Or\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"And\",\n\t\t\t\t\t\t\t\t\t\"label\": \"And\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"sectFilterCondition3\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Filter Condition\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextPartFieldCond3\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Field\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"chkIsNumCond3\",\n\t\t\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Is Number\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"dpdownOperatorsCond3\",\n\t\t\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"neq\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Not equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"lt\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Less than\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"lte\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Less than or equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"gt\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Greater than\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"gte\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Greater than or equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"btw\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Between\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextCond3Val1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"textBtwCond3\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"      And\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownOperatorsCond3\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"btw\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextCond3Val2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$chkPartitioned\",\n\t\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownConditions\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownOperatorsCond3\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"btw\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"pgAbout\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"outtxtAbout\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"The \\\"ADLS File Reader\\\" provides an easy way to connect and read parquet files from Azure Datalake Storage to SAS Compute.\\n\\nIt supports snappy compression on parquet files and allows reading multiple parquet files from hierarchical subdirectories structures used when the dataset is partitioned which is a \\nvery common approach to store files on data lakes\\n\\nFinally, the ADLS File Reader custom step allows filtering the data using a partition field, which allows to read only the information selected from the expression filter and avoid scanning and transferring all the unnecessary data (also known as partition pruning)\\n\\nThis custom steps depends on having a python environment configured with some additional libraries installed. It has been tested on SAS Viya version Stable 2022.12 with python version 3.8.13 and the following libraries versions:\\n\\n- pandas == 1.5.2\\n- saspy == 4.3.3\\n- azure-identity == 1.12.0\\n- pyarrow == 10.0.1\\n- pyarrowfs-adlgen2 == 0.2.3\\n\\nVersion 1.0 (JAN2023)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"intextTenantId\": \"\",\n\t\t\"intextClientid\": \"\",\n\t\t\"intextClientSec\": \"\",\n\t\t\"intextStorageAccount\": \"\",\n\t\t\"intextContainer\": \"\",\n\t\t\"intextFilePath\": \"\",\n\t\t\"dpdownFormat\": {\n\t\t\t\"value\": \"parquet\",\n\t\t\t\"label\": \"parquet\"\n\t\t},\n\t\t\"outtblid_dest\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"chkPartitioned\": false,\n\t\t\"dpdownConditions\": {\n\t\t\t\"value\": \"1\",\n\t\t\t\"label\": \"1\"\n\t\t},\n\t\t\"intextPartFieldCond1\": \"\",\n\t\t\"chkIsNumCond1\": false,\n\t\t\"dpdownOperatorsCond1\": {\n\t\t\t\"value\": \"eq\",\n\t\t\t\"label\": \"Equal to\"\n\t\t},\n\t\t\"intextCond1Val1\": \"\",\n\t\t\"intextCond1Val2\": \"\",\n\t\t\"dpdownOp1\": {\n\t\t\t\"value\": \"Or\",\n\t\t\t\"label\": \"Or\"\n\t\t},\n\t\t\"intextPartFieldCond2\": \"\",\n\t\t\"chkIsNumCond2\": false,\n\t\t\"dpdownOperatorsCond2\": {\n\t\t\t\"value\": \"eq\",\n\t\t\t\"label\": \"Equal to\"\n\t\t},\n\t\t\"intextCond2Val1\": \"\",\n\t\t\"intextCond2Val2\": \"\",\n\t\t\"dpdownOp2\": {\n\t\t\t\"value\": \"Or\",\n\t\t\t\"label\": \"Or\"\n\t\t},\n\t\t\"intextPartFieldCond3\": \"\",\n\t\t\"chkIsNumCond3\": false,\n\t\t\"dpdownOperatorsCond3\": {\n\t\t\t\"value\": \"eq\",\n\t\t\t\"label\": \"Equal to\"\n\t\t},\n\t\t\"intextCond3Val1\": \"\",\n\t\t\"intextCond3Val2\": \"\"\n\t}\n}","templates":{"SAS":"/***********************************************************************\n Custom Step for reading parquet files from ADLS, supports reading from \n partitioned directory structure and also can apply filtering criteria\n up to 3 conditions.\n\n***********************************************************************/\n\nproc python;\nsubmit;\n\nfrom azure.identity import ClientSecretCredential\nimport pandas as pd\nimport pyarrow.fs\nimport pyarrow.dataset as ds\nimport pyarrowfs_adlgen2\nimport logging\nfrom abc import ABCMeta, abstractmethod\n\n\n# -------------  INI Utilities --------------------------------------------------------------------------\nclass Condition(metaclass=ABCMeta):\n    def __init__(self, key, value_1):\n        \"\"\"\n        :param key:\n        :param value_1:\n        \"\"\"\n        self._key = key\n        self._value_1 = value_1\n        self._type_1 = type(value_1)\n\n    @abstractmethod\n    def genExpression(self, **kwargs):\n        \"\"\"\n        Abstract definition for getting the operation tuple\n        Returns\n        -------\n        :return: condition : Tuple\n        \"\"\"\n        pass\n\nclass BinaryCondition(Condition, metaclass=ABCMeta):\n    def __init__(self, key, value_1, value_2):\n        \"\"\"\n        :param key:\n        :param value_1:\n        :param value_2:\n        \"\"\"\n        super().__init__(key, value_1)\n        self._value_2 = value_2\n        self._type_2 = type(value_2)\n\n    @abstractmethod\n    def genExpression(self, **kwargs):\n        \"\"\"\n        Abstract definition for getting the operation tuple\n        Returns\n        -------\n        :return: condition : Tuple\n        \"\"\"\n        pass\n\nclass Eq(Condition, metaclass=ABCMeta):\n    def genExpression(self, **kwargs):\n        \"\"\"\n        Abstract definition for getting the operation tuple\n        Returns\n        -------\n        :return: condition : Tuple\n        \"\"\"\n        return ds.field(self._key) == self._value_1\n\nclass Neq(Condition, metaclass=ABCMeta):\n    def genExpression(self, **kwargs):\n        \"\"\"\n        Abstract definition for getting the operation tuple\n        Returns\n        -------\n        :return: condition : Tuple\n        \"\"\"\n        return (ds.field(self._key) != self._value_1)\n\nclass Lt(Condition, metaclass=ABCMeta):\n    def __init__(self, key, value_1, equals = False):\n        super().__init__(key, value_1)\n        self._equals = equals\n\n    def genExpression(self, **kwargs):\n        \"\"\"\n        Abstract definition for getting the operation tuple\n        Returns\n        -------\n        :return: condition : Tuple\n        \"\"\"\n        if self._equals:\n            return (ds.field(self._key) <= self._value_1)\n        else:\n            return (ds.field(self._key) < self._value_1)\n\nclass Gt(Condition, metaclass=ABCMeta):\n    def __init__(self, key, value_1, equals = False):\n        super().__init__(key, value_1)\n        self._equals = equals\n\n    def genExpression(self, **kwargs):\n        \"\"\"\n        Abstract definition for getting the operation tuple\n        Returns\n        -------\n        :return: condition : Tuple\n        \"\"\"\n        if self._equals:\n            return (ds.field(self._key) >= self._value_1)\n        else:\n            return (ds.field(self._key) > self._value_1)\n\nclass Btw(BinaryCondition, metaclass=ABCMeta):\n    def genExpression(self, **kwargs):\n        \"\"\"\n        Abstract definition for getting the operation tuple\n        Returns\n        -------\n        :return: condition : Tuple\n        \"\"\"\n        return ((ds.field(self._key) >= self._value_1) & (ds.field(self._key) <= self._value_2))\n\nclass ConditionFactory(metaclass=ABCMeta):\n    \"\"\"\n    Factory method for the operand based on the operand name\n    \"\"\"\n    @staticmethod\n    def instance_condition(condition_name, key, value_1, value_2) -> Condition:\n        if condition_name == \"eq\":\n            condition= Eq(key, value_1)\n        elif condition_name == \"neq\":\n            condition = Neq(key, value_1)\n        elif condition_name == \"lt\":\n            condition = Lt(key, value_1, equals=False)\n        elif condition_name == \"lte\":\n            condition = Lt(key, value_1, equals=True)\n        elif condition_name == \"gt\":\n            condition = Gt(key, value_1, equals=False)\n        elif condition_name == \"gte\":\n            condition = Gt(key, value_1, equals=True)\n        elif condition_name == \"btw\":\n            condition = Btw(key, value_1, value_2)\n        else:\n            raise ValueError(\"type should be one of: ['eq', 'neq', 'lt', 'lte', 'gt', 'gte', 'btw'].\")\n\n        return condition\n\nclass ADLSFilerReaderExpressionFilterGenerator(metaclass=ABCMeta):\n\n    def generate_conditions(self, conditions_no, SAS, logger, iterative=False):\n        conditions = []\n        conditionChainsOp = []\n\n        for i in range(1, conditions_no + 1):\n            condition_name = SAS.symget('dpdownOperatorsCond%s' % i)\n            key = SAS.symget('intextPartFieldCond%s' % i)\n            isNumber = SAS.symget('chkIsNumCond%s' % i)\n            value_1 = int(SAS.symget('intextCond%sVal1' % i)) if isNumber == '1' else SAS.symget('intextCond%sVal1' % i)\n\n            logger.info(\n                \" SAS macro 'dpdownOperatorsCond%s' Type: %s, Value: %s\" % (i, type(condition_name), condition_name))\n            logger.info(\" SAS macro 'intextPartFieldCond%s' Type: %s, Value: %s\" % (i, type(key), key))\n            logger.info(\" SAS macro 'chkIsNumCond%s' Type: %s, Value: %s\" % (i, type(isNumber), isNumber))\n            logger.info(\" SAS macro 'intextCond%sVal1' Type: %s, Value: %s\" % (i, type(value_1), value_1))\n\n\n            if condition_name == 'btw':\n                value_2 = int(SAS.symget('intextCond%sVal2' % i)) if isNumber == '1' else SAS.symget('intextCond%sVal2' % i)\n                logger.info(\" SAS macro 'intextCond%sVal2' Type: %s, Value: %s\" % (i, type(value_2), value_2))\n\n            conditions.append(\n                ConditionFactory.instance_condition(\n                    condition_name=condition_name,\n                    key=key,\n                    value_1=value_1,\n                    value_2= value_2 if condition_name == 'btw' else None\n                )\n            )\n\n            if i > 1 and i <= conditions_no:\n                dpdownOp = SAS.symget('dpdownOp%s' % (i - 1))\n                logger.info(\" SAS macro 'dpdownOp%s' Type: %s, Value: %s\" % (i - 1, type(dpdownOp), dpdownOp))\n\n                conditionChainsOp.append(dpdownOp)\n\n        if iterative:\n            return self.__chain_conditions_iter(conditions, conditionChainsOp, logger)\n        else:\n            return self.__chain_conditions(conditions, conditionChainsOp, logger)\n\n    def __chain_conditions_iter(self, conditions, conditionChainsOp, logger):\n        def genSingleCond(condition):\n            return condition.genExpression()\n\n        def genDualCond(condition1, condition2, operator):\n            if operator == \"Or\":\n                return (\n                        condition1.genExpression() |\n                        condition2.genExpression()\n                )\n            elif operator == \"And\":\n                return (\n                        condition1.genExpression() &\n                        condition2.genExpression()\n                )\n            else:\n                raise ValueError(\"Conditions Chains Operations can only be one of: ['Or', 'And']\")\n\n        result = None\n        extractFirst = False\n\n        while len(conditions) > 0:\n            if len(conditions) == 1:\n                if result is None:\n                    result = genSingleCond(conditions[0])\n                else:\n                    if conditionChainsOp[0] == \"Or\":\n                        result = result | conditions[0].genExpression()\n                    elif conditionChainsOp[0] == \"And\":\n                        result = result & conditions[0].genExpression()\n            elif extractFirst == False:\n                result = genSingleCond(conditions[0])\n                extractFirst = True\n            else:\n                if conditionChainsOp[0] == \"Or\":\n                    result = result | conditions[0].genExpression()\n                elif conditionChainsOp[0] == \"And\":\n                    result = result & conditions[0].genExpression()\n                conditionChainsOp = conditionChainsOp[1:]\n\n            conditions = conditions[1:]\n        return result\n\n    def __chain_conditions(self, conditions, conditionChainsOp, logger):\n        if len(conditions) == 1:\n            result = conditions[0].genExpression()\n        elif len(conditions) == 2:\n            if conditionChainsOp[0] == \"Or\":\n                result = (\n                        (conditions[0].genExpression()) |\n                        (conditions[1].genExpression())\n                )\n            elif conditionChainsOp[0] == \"And\":\n                result = (\n                        (conditions[0].genExpression()) &\n                        (conditions[1].genExpression())\n                )\n            else:\n                raise ValueError(\"Conditions Chains Operations can only be one of: ['Or', 'And']\")\n        elif len(conditions) == 3:\n            if conditionChainsOp[0] == \"Or\" and conditionChainsOp[1] == \"Or\":\n                result = (\n                        (conditions[0].genExpression()) |\n                        (conditions[1].genExpression()) |\n                        (conditions[2].genExpression())\n                )\n            elif conditionChainsOp[0] == \"And\" and conditionChainsOp[1] == \"And\":\n                result = (\n                        (conditions[0].genExpression()) &\n                        (conditions[1].genExpression()) &\n                        (conditions[2].genExpression())\n                )\n            elif conditionChainsOp[0] == \"Or\" and conditionChainsOp[1] == \"And\":\n                result = (\n                        (conditions[0].genExpression()) |\n                        (conditions[1].genExpression()) &\n                        (conditions[2].genExpression())\n                )\n            elif conditionChainsOp[0] == \"And\" and conditionChainsOp[1] == \"Or\":\n                result = ((conditions[0].genExpression()) & (conditions[1].genExpression()) | (conditions[2].genExpression()))\n            else:\n                 raise ValueError(\"Conditions Chains Operations can only be one of: ['Or', 'And']\")\n\n        logger.info(\" Python var 'chain_conditions_result': %s\" % str(result))\n        return result\n\n# -------------  END Utilities --------------------------------------------------------------------------\n\n\n\n# -------------  INI CustomStep Logic --------------------------------------------------------------------\nlogging.basicConfig(level=logging.ERROR)\n\n# create logger\nlogger = logging.getLogger('sas.customsteps.adlsFileReader')\nlogger.setLevel(logging.INFO)\n\ntenant_id = SAS.symget('intextTenantId')\nclient_id = SAS.symget('intextClientid')\nclient_secret = SAS.symget('intextClientSec')\nstorage_account_name = SAS.symget('intextStorageAccount')\ncontainer_name = SAS.symget('intextContainer')\nintextFilePath = SAS.symget('intextFilePath')\nchkPartitioned = SAS.symget('chkPartitioned')\n\nlogger.info(\" SAS macro 'intextTenantId' Type: %s, Value: %s\" % (type(tenant_id), tenant_id))\nlogger.info(\" SAS macro 'intextClientid' Type: %s, Value: %s\" % (type(client_id), client_id))\nlogger.info(\" SAS macro 'intextClientSec' Type: %s, Value: %s\" % (type(client_secret), client_secret))\nlogger.info(\" SAS macro 'intextStorageAccount' Type: %s, Value: %s\" % (type(storage_account_name), storage_account_name))\nlogger.info(\" SAS macro 'intextContainer' Type: %s, Value: %s\" % (type(container_name), container_name))\nlogger.info(\" SAS macro 'intextFilePath' Type: %s, Value: %s\" % (type(intextFilePath), intextFilePath))\nlogger.info(\" SAS macro 'chkPartitioned' Type: %s, Value: %s\" % (type(chkPartitioned), chkPartitioned))\n\ncredentialClient = ClientSecretCredential(tenant_id, client_id, client_secret)\n\nhandler = pyarrowfs_adlgen2.FilesystemHandler.from_account_name(\n    account_name=storage_account_name,\n    file_system_name=container_name,\n    credential=credentialClient\n)\nfs2 = pyarrow.fs.PyFileSystem(handler)\n\nisParted = (int(chkPartitioned) == 1)\nlogger.info(\" Python var 'isParted' Type: %s, Value: %s\" % (type(isParted), isParted))\n\nif isParted == False:\n    # Option 1 read the whole dataset\n    df = pd.read_parquet(intextFilePath, filesystem=fs2)\nelse:\n    dpdownConditions = SAS.symget('dpdownConditions')\n    logger.info(\" SAS macro 'dpdownCondition' Type: %s, Value: %s\" % (type(dpdownConditions), dpdownConditions))\n\n    adls_filter_gen = ADLSFilerReaderExpressionFilterGenerator()\n\n    # Option 2 read the dataset and filter by partitions\n    df = pd.read_parquet(\n        path=intextFilePath,\n        filesystem=fs2,\n        engine=\"pyarrow\",\n        partitioning='hive',\n        filters=adls_filter_gen.generate_conditions(int(dpdownConditions), SAS, logger)\n    )\n\nSAS.df2sd(df, SAS.symget('outtblid_dest'))\n# -------------  END CustomStep Logic --------------------------------------------------------------------\n\nendsubmit;\nquit;\n\n\n"}}