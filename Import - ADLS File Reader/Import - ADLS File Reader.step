{"creationTimeStamp":"2023-01-31T16:46:22.745Z","modifiedTimeStamp":"2023-04-25T11:47:35.559Z","createdBy":"alfredo","modifiedBy":"alfredo","name":"Import - ADLS File Reader.step","displayName":"Import - ADLS File Reader.step","localDisplayName":"Import - ADLS File Reader.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/4f43854e-65b4-4f7c-9ed2-f48863d60dd0","uri":"/dataFlows/steps/4f43854e-65b4-4f7c-9ed2-f48863d60dd0","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/4f43854e-65b4-4f7c-9ed2-f48863d60dd0","uri":"/dataFlows/steps/4f43854e-65b4-4f7c-9ed2-f48863d60dd0","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/4f43854e-65b4-4f7c-9ed2-f48863d60dd0","uri":"/dataFlows/steps/4f43854e-65b4-4f7c-9ed2-f48863d60dd0","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/4f43854e-65b4-4f7c-9ed2-f48863d60dd0","uri":"/dataFlows/steps/4f43854e-65b4-4f7c-9ed2-f48863d60dd0"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/4f43854e-65b4-4f7c-9ed2-f48863d60dd0","uri":"/dataFlows/steps/4f43854e-65b4-4f7c-9ed2-f48863d60dd0","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/4f43854e-65b4-4f7c-9ed2-f48863d60dd0","uri":"/dataFlows/steps/4f43854e-65b4-4f7c-9ed2-f48863d60dd0","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[],"outputPorts":[{"name":"outtblid_dest","displayName":"outtblid_dest","localDisplayName":"outtblid_dest","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table","supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"pageConnection\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Connection Settings\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectCredentials\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"ADLS credentials\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"intextTenantId\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"placeholder\": \"Type the tentant id\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"intextClientid\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"placeholder\": \"Type the client id\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"intextClientSec\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"placeholder\": \"Type the client secret\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectStorageOpts\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Storage options\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"intextStorageAccount\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"placeholder\": \"Type the storage account\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"intextContainer\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"placeholder\": \"Type the container\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"intextFilePath\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"placeholder\": \"Type the path\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"outtblid_dest\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Destination\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"pgOptions\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Options\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"dpdownFormat\",\n\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\"label\": \"File format:\",\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"parquet\",\n\t\t\t\t\t\t\t\"label\": \"Parquet\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"deltalake\",\n\t\t\t\t\t\t\t\"label\": \"Delta Lake\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"chkApplyFilters\",\n\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\"label\": \"Apply filter\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sectFilterConditions\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Filter conditions\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"$chkApplyFilters\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\"label\": \"Select the number of filtering conditions:\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"1\",\n\t\t\t\t\t\t\t\t\t\"label\": \"1\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"2\",\n\t\t\t\t\t\t\t\t\t\"label\": \"2\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"3\",\n\t\t\t\t\t\t\t\t\t\"label\": \"3\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": \"$chkApplyFilters\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"sectFilterCond1\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Filter condition #1\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$chkApplyFilters\",\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextPartFieldCond1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Field\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"$chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"chkIsNumCond1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Is number\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"dpdownOperatorsCond1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"neq\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Not equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"lt\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Less than\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"lte\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Less than or equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"gt\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Greater than\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"gte\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Greater than or equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"btw\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Between\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextCond1Val1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"textBtwCond1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"      And\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownOperatorsCond1\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"btw\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextCond1Val2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownOperatorsCond1\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"btw\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"dpdownOp1\",\n\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Or\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Or\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"And\",\n\t\t\t\t\t\t\t\t\t\"label\": \"And\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$chkApplyFilters\",\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"sectFilterCond2\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Filter condition #2\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextPartFieldCond2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Field\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"chkIsNumCond2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Is number\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"dpdownOperatorsCond2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"neq\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Not equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"lt\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Less than\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"lte\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Less than or equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"gt\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Greater than\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"gte\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Greater than or equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"btw\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Between\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextCond2Val1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"textBtwCond2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"      And\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownOperatorsCond2\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"btw\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextCond2Val2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"2\"\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownOperatorsCond2\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"btw\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"dpdownOp2\",\n\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"Or\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Or\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"And\",\n\t\t\t\t\t\t\t\t\t\"label\": \"And\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"sectFilterCond3\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Filter condition #3\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextPartFieldCond3\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Field\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"chkIsNumCond3\",\n\t\t\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Is number\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"dpdownOperatorsCond3\",\n\t\t\t\t\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"eq\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"neq\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Not equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"lt\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Less than\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"lte\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Less than or equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"gt\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Greater than\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"gte\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Greater than or equal to\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"btw\",\n\t\t\t\t\t\t\t\t\t\t\t\"label\": \"Between\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextCond3Val1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"textBtwCond3\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"      And\",\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownOperatorsCond3\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"btw\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"intextCond3Val2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"Value\",\n\t\t\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"chkApplyFilters\",\n\t\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\"$dpdownFilterCondNum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"3\"\n\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"$dpdownOperatorsCond3\",\n\t\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\t\"btw\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"pgAbout\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"outtxtAbout\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"The \\\"Import - ADLS File Reader\\\" provides an easy way to connect and read Parquet and Delta Lake files from Azure Data Lake Storage (ADLS) to SAS Compute or CAS.\\n\\nIt supports reading snappy compressed Parquet and DeltaLake file formats and allows reading from partitioned tables (hierarchical nested subdirectories structures \\ncommonly used when partitioning the datasest a very common approach when storing datasets on data lakes). \\nIts supports expression filters push-down using any of the dataset fields which avoid reading and transferring unnecessary data between the origin and source destination (*when used with partitioned fields it's known as partition pruning*)\\n\\nThis custom step helps to work around some of the restrictions that currently exist for working with Parquet files in SAS Viya. Please check the following documentation that lists those restrictions for the latest SAS Viya release:\\n\\n*  Restrictions for Parquet File Features for the libname engine (SAS Compute Server)- https://go.documentation.sas.com/doc/en/pgmsascdc/default/enghdff/p1pr85ltrpplbtn1h9sog99p4mr5.htm\\n*  Azure Data Lake Storage Data Source (SAS Cloud Analytic Services)-https://go.documentation.sas.com/doc/en/pgmsascdc/default/casref/n1ogaeli0qbctqn1e3fx8gz70lkq.htm\\n*  Path-Based Data Source Types and Options – which has a footnote for Parquet (SAS Cloud Analytic Services)-https://go.documentation.sas.com/doc/en/pgmsascdc/default/casref/n0kizq68ojk7vzn1fh3c9eg3jl33.htm#n0cxk3edba75w8n1arx3n0dxtdrt\\n\\nThis custom step depends on having a python environment configured with some additional libraries installed. It has been tested on SAS Viya version Stable 2023.03 with python version 3.8.13 and the following libraries versions:\\n\\n- pandas == 1.5.2               \\n- saspy == 4.3.3                \\n- azure-identity == 1.12.0      \\n- pyarrow == 10.0.1             \\n- adlfs == 2023.1.0             \\n\\nVersion 2.0.1 (25APR2023)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"intextTenantId\": \"\",\n\t\t\"intextClientid\": \"\",\n\t\t\"intextClientSec\": \"\",\n\t\t\"intextStorageAccount\": \"\",\n\t\t\"intextContainer\": \"\",\n\t\t\"intextFilePath\": \"\",\n\t\t\"outtblid_dest\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"dpdownFormat\": {\n\t\t\t\"value\": \"parquet\",\n\t\t\t\"label\": \"Parquet\"\n\t\t},\n\t\t\"chkApplyFilters\": false,\n\t\t\"dpdownFilterCondNum\": {\n\t\t\t\"value\": \"1\",\n\t\t\t\"label\": \"1\"\n\t\t},\n\t\t\"intextPartFieldCond1\": \"\",\n\t\t\"chkIsNumCond1\": false,\n\t\t\"dpdownOperatorsCond1\": {\n\t\t\t\"value\": \"eq\",\n\t\t\t\"label\": \"Equal to\"\n\t\t},\n\t\t\"intextCond1Val1\": \"\",\n\t\t\"intextCond1Val2\": \"\",\n\t\t\"dpdownOp1\": {\n\t\t\t\"value\": \"Or\",\n\t\t\t\"label\": \"Or\"\n\t\t},\n\t\t\"intextPartFieldCond2\": \"\",\n\t\t\"chkIsNumCond2\": false,\n\t\t\"dpdownOperatorsCond2\": {\n\t\t\t\"value\": \"eq\",\n\t\t\t\"label\": \"Equal to\"\n\t\t},\n\t\t\"intextCond2Val1\": \"\",\n\t\t\"intextCond2Val2\": \"\",\n\t\t\"dpdownOp2\": {\n\t\t\t\"value\": \"Or\",\n\t\t\t\"label\": \"Or\"\n\t\t},\n\t\t\"intextPartFieldCond3\": \"\",\n\t\t\"chkIsNumCond3\": false,\n\t\t\"dpdownOperatorsCond3\": {\n\t\t\t\"value\": \"eq\",\n\t\t\t\"label\": \"Equal to\"\n\t\t},\n\t\t\"intextCond3Val1\": \"\",\n\t\t\"intextCond3Val2\": \"\"\n\t}\n}","templates":{"SAS":"/***********************************************************************\n Custom Step for reading parquet files from ADLS, supports reading from \n partitioned directory structure and also can apply filtering criteria\n up to 3 conditions.\n\n***********************************************************************/\n\nproc python terminate;\nsubmit;\n\nimport json\nimport logging\nimport re\nfrom abc import ABCMeta, abstractmethod\nfrom copy import deepcopy\nfrom typing import Union\n\nimport pandas as pd\nimport pyarrow as pa\nimport pyarrow.dataset as ds\nimport pyarrow.parquet as pq\nfrom adlfs import AzureBlobFileSystem\nfrom fsspec.implementations.local import LocalFileSystem\nfrom fsspec.spec import AbstractFileSystem\nfrom pyarrow.dataset import dataset as pyarrow_dataset\nfrom saspy import SASsession\n\n# -------------  INI Utilities --------------------------------------------------------------------------\nclass ADLSFilerReader(metaclass=ABCMeta):\n    \"\"\"\n    Pyarrow expression filter generator\n    \"\"\"\n\n    def __init__(self,\n                 SAS: SASsession,\n                 tenant_id: str,\n                 client_id: str,\n                 client_secret: str,\n                 account_name: str,\n                 container: str,\n                 sas_format_selector_id: str,\n                 apply_filters: bool,\n                 sas_num_cond_selector_id: str,\n                 sas_cond_field_sel_prefix_id: str,\n                 sas_cond_isnum_sel_prefix_id: str,\n                 sas_cond_operator_sel_prefix_id: str,\n                 sas_cond_value_sel_prefix_id: str,\n                 sas_cond_chain_sel_prefix_id: str):\n        \"\"\"\n\n        :param SAS:\n        :param tenant_id:\n        :param client_id:\n        :param client_secret:\n        :param account_name:\n        :param container:\n        :param sas_format_selector_id:\n        :param apply_filters:\n        :param sas_num_cond_selector_id:\n        :param sas_cond_field_sel_prefix_id:\n        :param sas_cond_isnum_sel_prefix_id:\n        :param sas_cond_operator_sel_prefix_id:\n        :param sas_cond_value_sel_prefix_id:\n        :param sas_cond_chain_sel_prefix_id:\n        \"\"\"\n\n        self._logger = logging.getLogger('sas.customsteps.adlsFileReader')\n\n        if SAS is None:\n            self._logger.error(\"The SAS object is mandatory\")\n            raise ValueError(\"The SAS object is mandatory\")\n        else:\n            self._SAS = SAS\n\n        self._tenant_id = tenant_id\n        self._client_id = client_id\n        self._client_secret = client_secret\n        self._account_name = account_name\n\n        format_selector = self._SAS.symget(f\"{sas_format_selector_id}\")\n        self._logger.debug(\n            f\" SAS macro '{sas_format_selector_id}' Type: {type(format_selector)}, Value: {format_selector}\")\n        if format_selector not in [\"parquet\", \"deltalake\"]:\n            raise ValueError(f\"The format must be one of: 'parquet', 'deltalake'\")\n        self._format = format_selector\n        self._container = container\n\n        self._apply_filters = apply_filters\n\n        if self._apply_filters:\n            num_cond_sel = self._SAS.symget(f\"{sas_num_cond_selector_id}\")\n            self._logger.debug(\n                f\" SAS macro '{sas_num_cond_selector_id}' Type: {type(num_cond_sel)}, Value: {num_cond_sel}\")\n\n            if num_cond_sel not in [\"1\", \"2\", \"3\"]:\n                raise ValueError(f\"The number of partitions must be between 1 and 3\")\n\n            self._num_cond = int(num_cond_sel)\n\n            self._filter_conditions = []\n            self._filter_chain_opp = []\n\n            \"\"\"\n            Generates the fields _filter_conditions and _filter_chain_opp\n            The _filter_conditions property is a json object describing the filter condition with the following structure:\n            {\n                field: str      -> \"holds the value of the 'intextPartFieldCond{i}' field\",\n                isNum: bool     -> \"holds the value of the 'chkIsNumCond{i}' field\",\n                operator: str   -> \"holds the value of the 'dpdownOperatorsCond{i}' field\",\n                value1: str/int -> \"holds the value of the 'intextCond1Val{i}' field\",\n                value2: str/int -> \"holds the value of the 'intextCond2Val1{i}' field\",\n            }\n            \"\"\"\n            for i in range(1, self._num_cond + 1):\n                filter_cond = {}\n                condition_field = self._SAS.symget(f\"{sas_cond_field_sel_prefix_id}{i}\")\n                self._logger.debug(\n                    f\" SAS macro '{sas_cond_field_sel_prefix_id}{i}' Type: {type(condition_field)}, Value: {condition_field}\")\n                filter_cond[\"field\"] = condition_field\n\n                cond_isnum_sel = self._SAS.symget(f\"{sas_cond_isnum_sel_prefix_id}{i}\")\n                self._logger.debug(\n                    f\" SAS macro '{sas_cond_isnum_sel_prefix_id}{i}' Type: {type(cond_isnum_sel)}, Value: {cond_isnum_sel}\")\n                filter_cond[\"isNum\"] = (int(cond_isnum_sel) == 1)\n\n                cond_filter_oper_sel = self._SAS.symget(f\"{sas_cond_operator_sel_prefix_id}{i}\")\n                self._logger.debug(\n                    f\" SAS macro '{sas_cond_operator_sel_prefix_id}{i}' Type: {type(cond_filter_oper_sel)}, Value: {cond_filter_oper_sel}\")\n                if cond_filter_oper_sel not in [\"eq\", \"neq\", \"lt\", \"lte\", \"gt\", \"gte\", \"btw\"]:\n                    raise ValueError(f\"The filter condition operator must be one of: 'eq', 'neq', 'lt', 'lte', 'gt', \"\n                                     f\"'gte','btw'\")\n                filter_cond[\"operator\"] = cond_filter_oper_sel\n\n                cond1_value_sel = self._SAS.symget(f\"{sas_cond_value_sel_prefix_id}{i}Val1\")\n                self._logger.debug(\n                    f\" SAS macro '{sas_cond_value_sel_prefix_id}{i}Val1' Type: {type(cond1_value_sel)}, Value: {cond1_value_sel}\")\n                filter_cond[\"value1\"] = int(cond1_value_sel) if filter_cond[\"isNum\"] else cond1_value_sel\n\n                if cond_filter_oper_sel == \"btw\":\n                    cond2_value_sel = self._SAS.symget(f\"{sas_cond_value_sel_prefix_id}{i}Val2\")\n                    self._logger.debug(\n                        f\" SAS macro '{sas_cond_value_sel_prefix_id}{i}Val2' Type: {type(cond2_value_sel)}, Value: {cond2_value_sel}\")\n                    filter_cond[\"value2\"] = int(cond2_value_sel) if filter_cond[\"isNum\"] else cond2_value_sel\n\n                self._filter_conditions.append(filter_cond)\n\n                if 1 < i <= self._num_cond:\n                    cond_chain_sel = self._SAS.symget(f\"{sas_cond_chain_sel_prefix_id}{(i - 1)}\")\n                    self._logger.debug(\n                        f\" SAS macro '{sas_cond_chain_sel_prefix_id}{i - 1}' Type: {type(cond_chain_sel)}, Value: {cond_chain_sel}\")\n                    if cond_chain_sel not in [\"Or\", \"And\"]:\n                        raise ValueError(\n                            f\"The filter condition chain must be one of: 'or', 'and'\")\n                    self._filter_chain_opp.append(cond_chain_sel)\n        else:\n            self._num_cond = None\n\n    class Condition(metaclass=ABCMeta):\n        def __init__(self, key, value_1):\n            \"\"\"\n            :param key:\n            :param value_1:\n            \"\"\"\n            self._key = key\n            self._value_1 = value_1\n            self._type_1 = type(value_1)\n\n        @abstractmethod\n        def genExpression(self, **kwargs):\n            \"\"\"\n            Abstract definition for getting the operation tuple\n            Returns\n            -------\n            :return: condition : Tuple\n            \"\"\"\n            pass\n\n    class BinaryCondition(Condition, metaclass=ABCMeta):\n        def __init__(self, key, value_1, value_2):\n            \"\"\"\n            :param key:\n            :param value_1:\n            :param value_2:\n            \"\"\"\n            super().__init__(key, value_1)\n            self._value_2 = value_2\n            self._type_2 = type(value_2)\n\n        @abstractmethod\n        def genExpression(self, **kwargs):\n            \"\"\"\n            Abstract definition for getting the operation tuple\n            Returns\n            -------\n            :return: condition : Tuple\n            \"\"\"\n            pass\n\n    class Eq(Condition, metaclass=ABCMeta):\n        def genExpression(self, **kwargs):\n            \"\"\"\n            Definition for getting the operation tuple for the EQ operator\n            Returns\n            -------\n            :return: condition : Tuple\n            \"\"\"\n            return ds.field(self._key) == self._value_1\n\n    class Neq(Condition, metaclass=ABCMeta):\n        def genExpression(self, **kwargs):\n            \"\"\"\n            Definition for getting the operation tuple for the NEQ operator\n            Returns\n            -------\n            :return: condition : Tuple\n            \"\"\"\n            return (ds.field(self._key) != self._value_1)\n\n    class Lt(Condition, metaclass=ABCMeta):\n        def __init__(self, key, value_1, equals=False):\n            super().__init__(key, value_1)\n            self._equals = equals\n\n        def genExpression(self, **kwargs):\n            \"\"\"\n            Abstract definition for getting the operation tuple\n            Returns\n            -------\n            :return: condition : Tuple\n            \"\"\"\n            if self._equals:\n                return (ds.field(self._key) <= self._value_1)\n            else:\n                return (ds.field(self._key) < self._value_1)\n\n    class Gt(Condition, metaclass=ABCMeta):\n        def __init__(self, key, value_1, equals=False):\n            super().__init__(key, value_1)\n            self._equals = equals\n\n        def genExpression(self, **kwargs):\n            \"\"\"\n            Definition for getting the operation tuple for the GT operator\n            Returns\n            -------\n            :return: condition : Tuple\n            \"\"\"\n            if self._equals:\n                return (ds.field(self._key) >= self._value_1)\n            else:\n                return (ds.field(self._key) > self._value_1)\n\n    class Btw(BinaryCondition, metaclass=ABCMeta):\n        def genExpression(self, **kwargs):\n            \"\"\"\n            Definition for getting the operation tuple for the BTW operator\n            Returns\n            -------\n            :return: condition : Tuple\n            \"\"\"\n            return ((ds.field(self._key) >= self._value_1) & (ds.field(self._key) <= self._value_2))\n\n    class DeltaTable:\n        \"\"\"\n        Taken from https://github.com/jeppe742/DeltaLakeReader under the Apache Licence.\n\n        Access Delta tables on different filesystems.\n        Parameters\n        -----------\n        path:  string\n            Path to the table in the file system.\n            Note that for Azure, AWS and GCP you need to include the container/bucket name in the path\n        file_system: FSSpec compliant filesystem\n            Filesystem to be used for reading the Delta files.\n        \"\"\"\n\n        def __init__(self, path, file_system=None):\n            if not isinstance(file_system, AbstractFileSystem) and file_system is not None:\n                raise TypeError(\"file_system must be a fsspec compliant filesystem\")\n\n            self.path = path\n            self.log_path = f\"{self.path}/_delta_log\"\n            self.version = 0\n            self.checkpoint = 0\n            self.files = set()\n            if file_system is None:\n                file_system = LocalFileSystem()\n            self.filesystem = file_system\n\n            if not self._is_delta_table():\n                raise ValueError(\n                    f\"\"\"Could not find transaction logs in path {self.log_path}.\n                    Make sure you point to the root of a delta table\"\"\"\n                )\n            self._as_newest_version()\n\n            # The PyArrow Dataset is exposed by a factory class,\n            # which makes it hard to inherit from it directly.\n            # Instead we will just have the dataset as an attribute and expose the important methods.\n            self.pyarrow_dataset = self._pyarrow_dataset()\n\n        def _pyarrow_dataset(self):\n            return pyarrow_dataset(\n                source=list(self.files),\n                filesystem=self.filesystem,\n                partitioning=\"hive\",\n                format=\"parquet\",\n                schema=self.schema,\n            )\n\n        def _is_delta_table(self):\n            return self.filesystem.exists(f\"{self.log_path}\")\n\n        def _reset_state(self):\n            self.files = set()\n\n        def _apply_from_checkpoint(self, checkpoint_version: int):\n\n            # reset file set, and checkpoint version\n            self._reset_state()\n            self.checkpoint = checkpoint_version\n\n            if self.checkpoint == 0:\n                return\n\n            # read latest checkpoint. It might be a multi-part checkpoint for very large checkpoints\n            checkpoint_files = self.filesystem.glob(\n                f\"{self.log_path}/{self.checkpoint:020}.checkpoint*.parquet\"\n            )\n            for checkpoint_path in checkpoint_files:\n                with self.filesystem.open(checkpoint_path) as checkpoint_file:\n                    checkpoint = pq.read_table(checkpoint_file).to_pandas()\n\n                    for _, row in checkpoint.iterrows():\n                        if row[\"metaData\"]:\n                            schema_string = row[\"metaData\"][\"schemaString\"]\n                            self.schema = self._schema_from_string(schema_string)\n                        elif row[\"add\"]:\n                            added_file = f\"{self.path}/{row['add']['path']}\"\n                            if added_file:\n                                self.files.add(added_file)\n\n        def _apply_partial_logs(self, version: int):\n            # Checkpoints are created every 10 transactions,\n            # so we need to find all log files with version\n            # up to 9 higher than checkpoint.\n            # Effectively, this means that we can just create a\n            # wild card for the first decimal of the checkpoint version\n\n            log_files = self.filesystem.glob(\n                f\"{self.log_path}/{self.checkpoint // 10:019}*.json\"\n            )\n            # sort the log files, so we are sure we get the correct order\n            log_files = sorted(log_files)\n            for log_file in log_files:\n\n                # Get version from log name\n                log_version = re.findall(r\"(\\d{20})\", log_file)[0]\n                self.version = int(log_version)\n\n                # Download log file\n                with self.filesystem.open(log_file) as log:\n                    for line in log:\n                        meta_data = json.loads(line)\n\n                        # Log contains other stuff, but we are only\n                        # interested in the add or remove entries\n                        if \"add\" in meta_data.keys():\n                            file = f\"{self.path}/{meta_data['add']['path']}\"\n                            self.files.add(file)\n\n                        elif \"remove\" in meta_data.keys():\n                            remove_file = f\"{self.path}/{meta_data['remove']['path']}\"\n                            # To handle 0 checkpoints, we might read the log file with\n                            # same version as checkpoint. this means that we try to\n                            # remove a file that belongs to an ealier version,\n                            # which we don't have in the list\n                            if remove_file in self.files:\n                                self.files.remove(remove_file)\n                        elif \"metaData\" in meta_data.keys():\n                            schema_string = meta_data[\"metaData\"][\"schemaString\"]\n                            self.schema = self._schema_from_string(schema_string)\n                    # Stop if we have reatched the desired version\n                    if self.version == version:\n                        break\n\n        def _as_newest_version(self):\n            # Try to get the latest checkpoint info\n            try:\n                # get latest checkpoint version\n                with self.filesystem.open(f\"{self.log_path}/_last_checkpoint\") as lst_check:\n                    checkpoint_info = lst_check.read()\n                checkpoint_info = json.loads(checkpoint_info)\n                self._apply_from_checkpoint(checkpoint_info[\"version\"])\n\n            except FileNotFoundError:\n                pass\n\n            # apply remaining versions. This can be a maximum of 9 versions.\n            # we will just break when we don't find any newer logs\n            self._apply_partial_logs(version=self.checkpoint + 9)\n\n        def to_table(self, *args, **kwargs):\n            \"\"\"\n            Convert to a pyarrow Table.\n            Is based on the `to_pandas` function from `pyarrow.Table.to_pandas`,\n            so any this will accept the same arguments.\n            For more information see https://arrow.apache.org/docs/python/generated/pyarrow.dataset.FileSystemDataset.html#pyarrow.dataset.FileSystemDataset.to_table\n            \"\"\"  # noqa E501\n            return self.pyarrow_dataset.to_table(*args, **kwargs)\n\n        def to_pandas(self, *args, **kwargs):\n            \"\"\"\n            Convert to a pandas dataframe.\n            Is based on the `to_pandas` function from `pyarrow.Table.to_pandas`,\n            so any this will accept the same arguments.\n            For more information see https://arrow.apache.org/docs/python/generated/pyarrow.Table.html?highlight=to_pandas#pyarrow.Table.to_pandas\n            \"\"\"  # noqa E501\n            return self.to_table().to_pandas(*args, **kwargs)\n\n        def as_version(self, version: int, inplace=True):\n            \"\"\"\n            Find the files for a specific version of the table.\n            Parameters:\n            ----------\n            version: int\n                The table version number that should be loaded\n            inplace: Bool\n                Specify wether the object should be modified inplace or not.\n                If `True`, the current object will be modified.\n                if `False`, a new instance of the `DeltaTable` will be returned with the given version.\n            Returns:\n            -------\n            dr : (DeltaTable)\n                Delta table that has parsed the log files for the specific version\n            \"\"\"\n            nearest_checkpoint = version // 10 * 10\n            if inplace:\n                self._apply_from_checkpoint(nearest_checkpoint)\n                self._apply_partial_logs(version=version)\n                self.pyarrow_dataset = self._pyarrow_dataset()\n                return self\n\n            deltaTable = deepcopy(self)\n            deltaTable._apply_from_checkpoint(nearest_checkpoint)\n            deltaTable._apply_partial_logs(version=version)\n            deltaTable.pyarrow_dataset = deltaTable._pyarrow_dataset()\n\n            return deltaTable\n\n        def _schema_from_string(self, schema_string: str):\n\n            fields = []\n            schema = json.loads(schema_string)\n            for field in schema[\"fields\"]:\n                name = field[\"name\"]\n                type = field[\"type\"]\n                nullable = field[\"nullable\"]\n                metadata = field[\"metadata\"]\n                pa_type = self._map_type(type)\n\n                fields.append(pa.field(name, pa_type, nullable=nullable, metadata=metadata))\n            return pa.schema(fields)\n\n        def _map_type(self, input_type: Union[dict, str]):\n\n            simple_type_mapping = {\n                \"byte\": pa.int8(),\n                \"short\": pa.int16(),\n                \"integer\": pa.int32(),\n                \"long\": pa.int64(),\n                \"float\": pa.float32(),\n                \"double\": pa.float64(),\n                \"string\": pa.string(),\n                \"boolean\": pa.bool_(),\n                \"binary\": pa.binary(),\n                \"date\": pa.date32(),\n                \"timestamp\": pa.timestamp(\"ns\"),\n            }\n\n            # If type is string, it should be a \"simple\" datatype\n            if isinstance(input_type, str):\n\n                # map simple data types, that can be directly converted\n                if input_type in simple_type_mapping:\n                    pa_type = simple_type_mapping[input_type]\n                else:\n                    # check for decimal types\n                    match = re.findall(r\"decimal\\(([0-9]*),([0-9]*)\\)\", input_type)\n                    if len(match) > 0:\n                        pa_type = pa.decimal128(int(match[0][0]), int(match[0][1]))\n                    else:\n                        raise TypeError(\n                            f\"Got type unsupported {input_type} when trying to parse schema\"\n                        )\n\n            # nested field needs special handling\n            else:\n                if input_type[\"type\"] == \"array\":\n                    # map list type to pyarrow types\n                    element_type = self._map_type(input_type[\"elementType\"])\n                    # pass a field as the type to the list with a name of \"element\".\n                    # This is just to comply with the way pyarrow creates lists when infering schemas\n                    pa_field = pa.field(\"element\", element_type)\n                    pa_type = pa.list_(pa_field)\n\n                elif input_type[\"type\"] == \"map\":\n                    key_type = self._map_type(input_type[\"keyType\"])\n                    item_type = self._map_type(input_type[\"valueType\"])\n                    pa_type = pa.map_(key_type, item_type)\n\n                elif input_type[\"type\"] == \"struct\":\n                    fields = []\n                    for field in input_type[\"fields\"]:\n                        name = field[\"name\"]\n                        input_type = field[\"type\"]\n                        nullable = field[\"nullable\"]\n                        metadata = field[\"metadata\"]\n                        field_type = self._map_type(input_type)\n\n                        fields.append(\n                            pa.field(name, field_type, nullable=nullable, metadata=metadata)\n                        )\n                    pa_type = pa.struct(fields)\n\n                else:\n                    raise TypeError(\n                        f\"Got type unsupported {input_type} when trying to parse schema\"\n                    )\n\n            return pa_type\n\n    def __instance_condition(self, condition_name, key, value_1, value_2) -> Condition:\n        \"\"\"\n        :param condition_name: Literal value representing the condition to be instanciated\n        :param key: Name of the field\n        :param value_1: Value of the field1\n        :param value_2: Value od the field2 only valid for the btw condition\n        :return:\n        \"\"\"\n\n        if condition_name == \"eq\":\n            condition = self.Eq(key, value_1)\n        elif condition_name == \"neq\":\n            condition = self.Neq(key, value_1)\n        elif condition_name == \"lt\":\n            condition = self.Lt(key, value_1, equals=False)\n        elif condition_name == \"lte\":\n            condition = self.Lt(key, value_1, equals=True)\n        elif condition_name == \"gt\":\n            condition = self.Gt(key, value_1, equals=False)\n        elif condition_name == \"gte\":\n            condition = self.Gt(key, value_1, equals=True)\n        elif condition_name == \"btw\":\n            condition = self.Btw(key, value_1, value_2)\n        else:\n            raise ValueError(\"type should be one of: ['eq', 'neq', 'lt', 'lte', 'gt', 'gte', 'btw'].\")\n\n        return condition\n\n    def __generate_conditions(self, iterative=False):\n        \"\"\"\n        :param iterative: Boolean value to use a more generic or predefined implemetation for chaining the filter conditions\n        :return:\n        \"\"\"\n        conditions = []\n        \"\"\"\n        Iterates over the _filter_conditions property and generate a condition object array \n        \"\"\"\n        for i in range(0, self._num_cond):\n            filter_condition = self._filter_conditions[i]\n            conditions.append(\n                self.__instance_condition(\n                    condition_name=filter_condition[\"operator\"],\n                    key=filter_condition[\"field\"],\n                    value_1=filter_condition[\"value1\"],\n                    value_2=filter_condition[\"value2\"] if filter_condition[\"operator\"] == 'btw' else None\n                )\n            )\n\n        if iterative:\n            return self.__chain_conditions_iter(conditions)\n        else:\n            return self.__chain_conditions(conditions)\n\n    def __chain_conditions_iter(self, conditions):\n        # \"\"\"\n        # Generic implementation for generating the chaining the filter conditions and generating the pyarrow filter expression\n        # @TODO still a work in progress\n        #\n        # :param conditions: List of filter expressions\n        # :param conditionChainsOp: List of chain operators\n        # :param logger: python logger\n        # :return: Array representing the final filtering expression (Pyarrow filter predicate must be expressed in DNF)\n        # \"\"\"\n        #\n        # def genSingleCond(condition):\n        #     return condition.genExpression()\n        #\n        # def genDualCond(condition1, condition2, operator):\n        #     if operator == \"Or\":\n        #         return (\n        #                 condition1.genExpression() |\n        #                 condition2.genExpression()\n        #         )\n        #     elif operator == \"And\":\n        #         return (\n        #                 condition1.genExpression() &\n        #                 condition2.genExpression()\n        #         )\n        #     else:\n        #         raise ValueError(\"Conditions Chains Operations can only be one of: ['Or', 'And']\")\n        #\n        # result = None\n        # extractFirst = False\n        #\n        # while len(conditions) > 0:\n        #     if len(conditions) == 1:\n        #         if result is None:\n        #             result = genSingleCond(conditions[0])\n        #         else:\n        #             if self._filter_chain_opp[0] == \"Or\":\n        #                 result = result | conditions[0].genExpression()\n        #             elif conditionChainsOp[0] == \"And\":\n        #                 result = result & conditions[0].genExpression()\n        #     elif extractFirst == False:\n        #         result = genSingleCond(conditions[0])\n        #         extractFirst = True\n        #     else:\n        #         if self._filter_chain_opp[0] == \"Or\":\n        #             result = result | conditions[0].genExpression()\n        #         elif self._filter_chain_opp[0] == \"And\":\n        #             result = result & conditions[0].genExpression()\n        #         conditionChainsOp = self._filter_chain_opp[1:]\n        #\n        #     conditions = conditions[1:]\n        # return result\n        pass\n\n    def __chain_conditions(self, conditions):\n        \"\"\"\n        Fixed implementation for generating the chaining up to 3 filter conditions and generating the pyarrow filter expression\n\n        :param conditions: List of filter expressions\n        :param conditionChainsOp: List of chain operators\n        :param logger: python logger\n        :return: Array representing the final filtering expression (Pyarrow filter predicate must be expressed in DNF)\n        \"\"\"\n        if len(conditions) == 1:\n            result = conditions[0].genExpression()\n        elif len(conditions) == 2:\n            if self._filter_chain_opp[0] == \"Or\":\n                result = (\n                        (conditions[0].genExpression()) |\n                        (conditions[1].genExpression())\n                )\n            elif self._filter_chain_opp[0] == \"And\":\n                result = (\n                        (conditions[0].genExpression()) &\n                        (conditions[1].genExpression())\n                )\n            else:\n                raise ValueError(\"Conditions Chains Operations can only be one of: ['Or', 'And']\")\n        elif len(conditions) == 3:\n            if self._filter_chain_opp[0] == \"Or\" and self._filter_chain_opp[1] == \"Or\":\n                result = (\n                        (conditions[0].genExpression()) |\n                        (conditions[1].genExpression()) |\n                        (conditions[2].genExpression())\n                )\n            elif self._filter_chain_opp[0] == \"And\" and self._filter_chain_opp[1] == \"And\":\n                result = (\n                        (conditions[0].genExpression()) &\n                        (conditions[1].genExpression()) &\n                        (conditions[2].genExpression())\n                )\n            elif self._filter_chain_opp[0] == \"Or\" and self._filter_chain_opp[1] == \"And\":\n                result = (\n                        (conditions[0].genExpression()) |\n                        (conditions[1].genExpression()) &\n                        (conditions[2].genExpression())\n                )\n            elif self._filter_chain_opp[0] == \"And\" and self._filter_chain_opp[1] == \"Or\":\n                result = ((conditions[0].genExpression()) & (conditions[1].genExpression()) | (\n                    conditions[2].genExpression()))\n            else:\n                raise ValueError(\"Conditions Chains Operations can only be one of: ['Or', 'And']\")\n\n        self._logger.debug(f\" Python var 'chain_conditions_result': {str(result)}\")\n        return result\n\n    def read(self, path):\n        if path is None or path == \"\":\n            raise \"The path argument can not be empty\"\n\n        root_path = path[:-1] if path.endswith(\"/\") else path\n\n        self._filesystem = AzureBlobFileSystem(\n            account_name=self._account_name,\n            tenant_id=self._tenant_id,\n            client_id=self._client_id,\n            client_secret=self._client_secret\n        )\n\n        if self._format == \"parquet\":\n            if self._apply_filters:\n                return pd.read_parquet(\n                    path=f\"{self._container}/{root_path}\",\n                    filesystem=self._filesystem,\n                    partitioning='hive',\n                    filters=self.__generate_conditions()\n                )\n            else:\n                return pd.read_parquet(\n                    path=f\"{self._container}/{root_path}\",\n                    filesystem=self._filesystem\n                )\n        elif self._format == \"deltalake\":\n            if self._apply_filters:\n                return self.DeltaTable(\n                    path=f\"{self._container}/{root_path}\",\n                    file_system=self._filesystem\n                ).to_table(filter=self.__generate_conditions())\\\n                    .to_pandas()\n            else:\n                return self.DeltaTable(\n                    path=f\"{self._container}/{root_path}\",\n                    file_system=self._filesystem\n                ).to_pandas()\n# -------------  END Utilities --------------------------------------------------------------------------\n\n\n\n# -------------  INI CustomStep Logic --------------------------------------------------------------------\nlogging.basicConfig(level=logging.ERROR)\n\n# create logger\nlogger = logging.getLogger('sas.customsteps.adlsFileReader')\nlogger.setLevel(logging.INFO)\n\ntenant_id = SAS.symget('intextTenantId')\nclient_id = SAS.symget('intextClientid')\nclient_secret = SAS.symget('intextClientSec')\nstorage_account_name = SAS.symget('intextStorageAccount')\ncontainer_name = SAS.symget('intextContainer')\nintextFilePath = SAS.symget('intextFilePath')\nchkApplyFilters = SAS.symget('chkApplyFilters')\n\n\nlogger.info(f\" SAS macro 'intextTenantId' Type: {type(tenant_id)}, Value: {tenant_id}\")\nlogger.info(f\" SAS macro 'intextClientid' Type: {type(client_id)}, Value: {client_id}\")\nlogger.info(f\" SAS macro 'intextClientSec' Type: {type(client_secret)}, Value: {client_secret}\")\nlogger.info(f\" SAS macro 'intextStorageAccount' Type: {type(storage_account_name)}, Value: {storage_account_name}\")\nlogger.info(f\" SAS macro 'intextContainer' Type: {type(container_name)}, Value: {container_name}\")\nlogger.info(f\" SAS macro 'intextFilePath' Type: {type(intextFilePath)}, Value: {intextFilePath}\")\nlogger.info(f\" SAS macro 'chkApplyFilters' Type: {type(chkApplyFilters)}, Value: {chkApplyFilters}\")\n\napplyFilters = (int(chkApplyFilters) == 1)\nlogger.info(\" Python var 'applyFilters' Type: %s, Value: %s\" % (type(applyFilters), applyFilters))\n\ndf = ADLSFilerReader(\n    SAS=SAS,\n    tenant_id=tenant_id,\n    client_id=client_id,\n    client_secret=client_secret,\n    account_name=storage_account_name,\n    container=container_name,\n    sas_format_selector_id='dpdownFormat',\n    apply_filters=applyFilters,\n    sas_num_cond_selector_id='dpdownFilterCondNum',\n    sas_cond_field_sel_prefix_id='intextPartFieldCond',\n    sas_cond_isnum_sel_prefix_id='chkIsNumCond',\n    sas_cond_operator_sel_prefix_id='dpdownOperatorsCond',\n    sas_cond_value_sel_prefix_id='intextCond',\n    sas_cond_chain_sel_prefix_id='dpdownOp'\n).read(path=intextFilePath)\n\nSAS.df2sd(df, SAS.symget('outtblid_dest'))\n# -------------  END CustomStep Logic --------------------------------------------------------------------\n\nendsubmit;\nquit;\n\n\n"}}