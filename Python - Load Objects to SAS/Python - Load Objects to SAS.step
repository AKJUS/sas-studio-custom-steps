{"creationTimeStamp":"2023-09-01T19:24:54.738Z","modifiedTimeStamp":"2023-09-05T22:42:40.107Z","createdBy":"viya_admin","modifiedBy":"viya_admin","name":"Python - Load Objects to SAS.step","displayName":"Python - Load Objects to SAS.step","localDisplayName":"Python - Load Objects to SAS.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/1cdc929b-f6af-4769-be44-fd7037682109","uri":"/dataFlows/steps/1cdc929b-f6af-4769-be44-fd7037682109","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/1cdc929b-f6af-4769-be44-fd7037682109","uri":"/dataFlows/steps/1cdc929b-f6af-4769-be44-fd7037682109","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/1cdc929b-f6af-4769-be44-fd7037682109","uri":"/dataFlows/steps/1cdc929b-f6af-4769-be44-fd7037682109","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/1cdc929b-f6af-4769-be44-fd7037682109","uri":"/dataFlows/steps/1cdc929b-f6af-4769-be44-fd7037682109"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/1cdc929b-f6af-4769-be44-fd7037682109","uri":"/dataFlows/steps/1cdc929b-f6af-4769-be44-fd7037682109","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/1cdc929b-f6af-4769-be44-fd7037682109","uri":"/dataFlows/steps/1cdc929b-f6af-4769-be44-fd7037682109","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[],"outputPorts":[{"name":"outputTable","displayName":"outputTable","localDisplayName":"outputTable","minEntries":0,"maxEntries":1,"defaultEntries":0,"type":"table","supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"parameters\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Parameters\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"selectedOption\",\n\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\"label\": \"Select your desired task:\",\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"pandas\",\n\t\t\t\t\t\t\t\"label\": \"Transfer Pandas dataframe\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"list\",\n\t\t\t\t\t\t\t\"label\": \"Transfer Python list\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"vars\",\n\t\t\t\t\t\t\t\"label\": \"Transfer common Python objects\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"dict\",\n\t\t\t\t\t\t\t\"label\": \"Transfer Python dictionary\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section1\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Input parameters\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"pdfName\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Name of Pandas dataframe:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"pandas\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"pythonVarName\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Name of Python object (integer, string names etc.):\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"vars\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"pythonListName\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Name of Python list:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"list\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"pythonDictName\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Name of Python dict:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"dict\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section2\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Output specifications\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"If you've selected a Pandas dataframe, Python list or dict, please attach a table to the outputTable output port.  Note that this replaces any table of the same name & location already existing in the CAS session.\",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"pandas\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"dict\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"list\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"delPdf\",\n\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\"label\": \"Delete Pandas dataframe after load\",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"pandas\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note: Deleting the Pandas dataframe will free up memory.  Uncheck this box only if you really plan to use the same dataframe in downstream Python code.\\n\\nFor lists and dicts, note that any temporary dataframe created to facilitate transfer will always be deleted. \",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"pandas\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"promoteTable\",\n\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\"label\": \"Promote SAS Cloud Analytics Services (CAS) table after load\",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"pandas\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"dict\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"list\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text3\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note: If you select this option, ensure your output table (outputTable port) points to a valid caslib.\\n\\nPromoting a CAS table replaces any table of the same name & location currently in global scope.\",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"pandas\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"dict\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"list\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"sasMacroVarName\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"SAS macro variable name:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"vars\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text4\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note: ensure you provide a valid SAS macro variable name (no spaces, not too long etc.)\",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"vars\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"listColumnName\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Desired name for list column in table:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"list\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text5\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note: ensure your column name conforms to output column guidelines (CAS table or SAS dataset as applicable) \",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"list\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"outputTable\",\n\t\t\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\t\t\"label\": \"Output table name:\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"pandas\"\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\t\"dict\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\"|\",\n\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\"$selectedOption\",\n\t\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\t\"list\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"config_tab\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Configuration\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"casHostPath\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Provide CAS hostname:\",\n\t\t\t\t\t\"placeholder\": \"sas-cas-server-default-client\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"casHostPort\",\n\t\t\t\t\t\"type\": \"numberfield\",\n\t\t\t\t\t\"label\": \"Provide CAS port:\",\n\t\t\t\t\t\"placeholder\": \"5570\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"min\": null,\n\t\t\t\t\t\"max\": null\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"about_tab\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Python - Load Objects to SAS\\n====================\\n\\nThis custom step enables you to transfer different Python objects from a Python session to corresponding objects in a SAS Viya environment.\\n\\nHere are the major object types handled:\\n\\n1.  Pandas dataframes                                        ==>     CAS tables / SAS datasets \\n2.  Standard Python objects (int, str etc.)        ==>.    SAS macro variables\\n3.  Lists                                                                  ==>     CAS tables / SAS datasets\\n4.  Dicts                                                                 ==>.    CAS tables / SAS datasets\\n\\nWhy go to this trouble?  \\n\\nIn a unified, integrated pipeline, once your Python program does its job,  transfer desired data objects to take advantage of SAS Viya's performant, distributed environment.  At the same time, you can easily free up memory taken up by these objects within Python.\\n\\n\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"sas_method_explanation\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Wait!  What about the SAS object in Proc Python? \",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"sas_method_explanation_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Yes, the SAS.df2sd callback object in proc python accomplishes something similar.  By all means, continue to use SAS callback methods if you're comfortable with the same.  \\n\\nSAS.df2sd is based on the premise of transferring Pandas dataframes over to SAS datasets (i.e. sas7bdat).  This custom step extends similar functionality to other data objects - Python lists, dicts, and even simple objects (ints or strings), directly to targets in SAS Cloud Analytics Services (CAS).\\n\\nIt's a convenient, low-code interface and where required, uses the SAS callback object and the CAS-centric swat package.\\n\\nA bonus: there's also an option to easily delete Pandas dataframes after they've served their purpose, and free memory.  Very useful for those of us who curse memory limits while forgetting to clean up after ourselves....\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"packages_section\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Python packages required\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"packages_list\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"This custom step requires Python (through proc python)  to be enabled inside SAS compute and makes use of the following Python packages: \\n\\n1. swat\\n2. pandas\\n\\nRefer documentation link below for package details.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_parameters\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Parameters\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Ensure:\\n\\n1. SAS Viya has access to an active Python environment.  Proc Python makes use of this Python environment.\\n\\n2. Required Python packages (see section \\\"Python packages required\\\") are installed.\\n\\n3. Preferable / recommended:  Administrators could make use of the SAS Configurator for Open Source (also commonly known as sas-pyconfig) to install and configure Python access from SAS Viya.  Refer SAS Viya Deployment Guide (monthly stable 2023.08 onwards) for instructions on the same. Documentation provided below.\\n\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_input\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Input Parameters\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"input_parameters_text\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"You can select your desired option, and fill up the corresponding field:\\n\\n1. Name of Pandas dataframe (text box): enter the name of a Pandas dataframe which has been referred in upstream Python code.\\n\\n2. Name of standard Python objects (text box): enter any \\\"variable\\\" names (strictly, Python does not have variables, and therefore we refer to them as objects) for integer or string values, which you wish to continue using in downstream SAS code as macro variables.\\n\\n3. Name of Python list (text box): enter the name of a Python list which you have used in upstream Python code.  Note that this list object would be converted to a Pandas dataframe and then transferred to a SAS dataset / CAS table.\\n\\n4. Name of Python dict (text box): enter the name of a Python dict which you have used in upstream Python code.  Note that this dict object would be converted to a Pandas dataframe and then transferred to a SAS dataset / CAS table.\\n\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_output_specs\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Output Specifications\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"output_parameters_text\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. Output table (output port, optional):  select / attach a table to this output port, which can either be a SAS dataset or a CAS table.\\n\\nNote that where available, an existing CAS session will be used as the local scope (context) for the output table.  In case you have chosen to promote this table, it will be made available globally.  In case a CAS session is not available, Python establishes a new connection to CAS and transfers the table.  Therefore, be mindful of the correct CAS session in order to locate this table. \\n\\n2. Delete Pandas dataframe after load (checked by default, optional, conditional upon Pandas dataframe selection):  Keep this checked in order to free memory, on the assumption that you'll now use the CAS table and don't require the Pandas dataframe any longer.\\n\\n3. Promote CAS table to global scope (check box, optional, conditional upon Pandas dataframe, list, or dict selection):  check this only if you have chosen to transfer the Python object to a CAS (and not a sas7bdat) table,  and if you wish for this table to be made available for all users of the caslib.\\n\\n4. SAS macro variable name (text box, required for standard Python object selection): provide a name of a corresponding SAS macro variable to hold the values of a Python object (int, string etc.) you wish to transfer.\\n\\n5. Desired name for list column in output table (text box, required for list selection): provide a name which will be used as the column name for the output SAS object containing the list (in table form).  The name should conform to SAS / CAS column naming conventions, as applicable.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"config_section\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Configuration\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"config_parameters_text\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. CAS server hostname (text box, default applied, modifiable): If you've chosen a CAS table as your output, this field is used to establish a connection to the CAS server.\\n\\n2. CAS server port (numeric field, default applied, modifiable): If you've chosen a CAS table as your output, this field is used to establish a connection to the CAS server.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_documentation\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Documentation\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"documentation_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"1. Documentation on the swat package: https://sassoftware.github.io/python-swat/\\n\\n2. Documentation on the SAS callback object and methods:  https://go.documentation.sas.com/doc/da/pgmsascdc/default/proc/p0z7ahqmabxu6kn193kdojjhc477.htm\\n\\n3. The pandas package: https://pypi.org/project/pandas/\\n\\n4. Scott McCauley's article on configuring Viya for Python integration: https://communities.sas.com/t5/SAS-Communities-Library/Configuring-SAS-Viya-for-Python-Integration/ta-p/847459\\n\\n5. The SAS Viya Platform Deployment Guide (refer to SAS Configurator for Open Source within): https://go.documentation.sas.com/doc/en/itopscdc/default/itopssr/p1n66p7u2cm8fjn13yeggzbxcqqg.htm?fromDefault=#p19cpvrrjw3lurn135ih46tjm7oi \\n\\n6. This SAS Communities article provides details on the environment variables which facilitate connecting to CAS using the swat package within SAS Studio: https://communities.sas.com/t5/SAS-Communities-Library/Hotwire-your-SWAT-inside-SAS-Studio/ta-p/835956\\n\\n7. Peter Styliadis provided this helpful post (SAS documentation link contained therein) on how to identify a current active CAS session: https://communities.sas.com/t5/SAS-Viya/Programmatically-detect-an-active-CAS-session/m-p/890914#M1985\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"change_log_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Version: 1.0  (01SEP2023)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"contact_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Created/contact: \\n\\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"selectedOption\": {\n\t\t\t\"value\": \"pandas\",\n\t\t\t\"label\": \"Transfer Pandas dataframe\"\n\t\t},\n\t\t\"pdfName\": \"\",\n\t\t\"pythonVarName\": \"\",\n\t\t\"pythonListName\": \"\",\n\t\t\"pythonDictName\": \"\",\n\t\t\"delPdf\": true,\n\t\t\"promoteTable\": true,\n\t\t\"sasMacroVarName\": \"\",\n\t\t\"listColumnName\": \"\",\n\t\t\"outputTable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"casHostPath\": \"sas-cas-server-default-client\",\n\t\t\"casHostPort\": 5570\n\t}\n}","templates":{"SAS":"/* SAS templated code goes here */\n\n/*-----------------------------------------------------------------------------------------*\n   START MACRO DEFINITIONS.\n*------------------------------------------------------------------------------------------*/\n\n/* -----------------------------------------------------------------------------------------* \n   This macro definition identifies if an active CAS session exists. About[doc] for details\n*------------------------------------------------------------------------------------------ */\n\n%if %sysfunc(symexist(_SESSREF_)) %then %do;\n   %let casSessionExists= %sysfunc(sessfound(&_SESSREF_.));\n%end;\n\n/*-----------------------------------------------------------------------------------------*\n   FUTURE PLACEHOLDER: EXECUTION CODE MACRO \n   NOTE: Execution code needs (proc python) submit blocks to be converted to infiles for \n         running within a macro.  Placeholder to undertake this in future.\n*------------------------------------------------------------------------------------------*/\n%macro main_execution_code;\n%mend main_execution_code;\n\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE \n   Note: Python code blocks follow different indentation logic and are currently not\n   indented within the SAS proc python blocks below. Comments may not be rendered as \n   elegantly as SAS code.\n*------------------------------------------------------------------------------------------*/\n\n/* -----------------------------------------------------------------------------------------* \n   This step \"hoists\" all required functions. Procs split for ease of access.\n*------------------------------------------------------------------------------------------ */\n\nproc python;\n   submit;\n\n#############################################################################################\n#\n#  Helper functions \n#\n#############################################################################################\n\n#############################################################################################\n#  Function to drop a table in global scope prior to promotion  \n#############################################################################################\n\ndef drop_global_table(conn,outputtable_name,outputtable_lib):\n   exists=conn.table.tableexists(name=outputtable_name,caslib=outputtable_lib)\n   if exists.exists > 0:\n      print(exists.exists)\n      conn.table.droptable(name=outputtable_name,caslib=outputtable_lib)\n      SAS.logMessage(\"Dropped existing table\")\n      drop_global_table(conn,outputtable_name,outputtable_lib)\n\n#############################################################################################\n#  Function to convert a pandas dataframe to a SAS table (either CAS or SAS) object. \n#  Note this is used for explicit Pandas dataframes selection as well as intermediate\n#  transfer object when lists / dicts are selected \n#############################################################################################\n\ndef pd_to_sas(pdf):\n   outputtable_engine    =  SAS.symget(\"OUTPUTTABLE_ENGINE\")   \n   SAS.logMessage(\"The output table engine is {}\".format(outputtable_engine))\n   if outputtable_engine==\"V9\":\n      outputtable        =  SAS.symget(\"outputTable\")\n      SAS.df2sd(pdf, dataset=outputtable)\n      SAS.logMessage(\"Transferred to SAS dataset.\")\n   else:\n      cas_session_exists =  SAS.symget(\"casSessionExists\")\n      sessuuid           =  SAS.symget(\"_IOCASUUID_\")\n      cas_host_path      =  SAS.symget(\"casHostPath\")\n      cas_host_port      =  SAS.symget(\"casHostPort\")\n      outputtable_name   =  SAS.symget(\"outputTable_name_base\")\n      outputtable_lib    =  SAS.symget(\"outputTable_lib\")\n      promote_table      =  SAS.symget(\"promoteTable\")\n      promote_flag       =  True if promote_table=='1' else False\n      replace_flag       =  False if promote_flag else True\n      import swat\n      import os\n#     Add certificate location to operating system list of trusted certs detailed in About tab - Documentation    \n      os.environ['CAS_CLIENT_SSL_CA_LIST']=os.environ['SSLCALISTLOC']\n#     Connect to CAS\n      if cas_session_exists=='1':\n         SAS.logMessage(\"Connection exists. Session UUID is {}\".format(sessuuid))   \n         conn = swat.CAS(hostname=cas_host_path,port=cas_host_port, password=os.environ['SAS_SERVICES_TOKEN'],session=sessuuid)\n      else:\n         SAS.logMessage(\"New Connection made to CAS through swat.\")\n         conn = swat.CAS(hostname=cas_host_path,port=cas_host_port, password=os.environ['SAS_SERVICES_TOKEN'])\n\n      if conn:\n         SAS.logMessage(\"Connection established.\")\n         drop_global_table(conn,outputtable_name,outputtable_lib)\n         cas_table = conn.CASTable(name=outputtable_name, caslib=outputtable_lib, replace=replace_flag, promote=promote_flag)\n         cas_table.from_dict(data=pdf, connection=conn, casout=cas_table)\n         SAS.logMessage(\"Table loaded to CAS.\")\n\n   endsubmit;\nquit;\n\n/* -----------------------------------------------------------------------------------------* \n   Execute operations based on user choice\n*------------------------------------------------------------------------------------------ */\n\nproc python;\n   submit;\n\nimport gc\n\n# Obtain values from UI\n\nselected_option = SAS.symget(\"selectedOption\")\npdf_name        = SAS.symget(\"pdfName\")\npvar_name       = SAS.symget(\"pythonVarName\")\npylist_name     = SAS.symget(\"pythonListName\")\npydict_name     = SAS.symget(\"pythonDictName\")   \n\n#############################################################################################\n#  Treatment for a standard Python int/str object \n#############################################################################################\n\nif selected_option == \"vars\" and pvar_name:\n   sas_macro_var_name = SAS.symget(\"sasMacroVarName\")\n   if not sas_macro_var_name:\n      SAS.logMessage(\"Provide a valid SAS macro variable!\",\"ERROR\")\n   else:\n      SAS.symput(sas_macro_var_name,locals()[pvar_name])\n      SAS.logMessage(\"The macro variable {} has value {}\".format(sas_macro_var_name,SAS.symget(sas_macro_var_name)))   \n\n#############################################################################################\n#  Treatment for a Python list object \n#############################################################################################\n\nif selected_option == \"list\" and pylist_name:\n   list_column_name   = SAS.symget(\"listColumnName\")\n   import pandas as pd\n   _pdf_from_list     = pd.DataFrame({list_column_name:locals()[pylist_name]})\n   pd_to_sas(_pdf_from_list)\n   del _pdf_from_list\n   gc.collect()\n   SAS.logMessage(\"Intermediate Pandas dataframe freed from memory.\")\n\n#############################################################################################\n#  Treatment for a Python dict object \n#############################################################################################\n\nif selected_option == \"dict\" and pydict_name:\n   import pandas as pd\n   _pdf_from_list     = pd.DataFrame(locals()[pydict_name])\n   pd_to_sas(locals()[pydict_name])\n   del locals()[pydict_name]\n   gc.collect()\n   SAS.logMessage(\"Intermediate Pandas dataframe freed from memory.\")\n\n#############################################################################################\n#  Treatment for a Pandas dataframe \n#############################################################################################\n\nif selected_option == \"pandas\" and pdf_name:\n   del_pdf            = SAS.symget(\"delPdf\")\n   pd_to_sas(locals()[pdf_name])\n   if del_pdf=='1':\n      del locals()[pdf_name]\n      gc.collect()\n      SAS.logMessage(\"Pandas dataframe freed from memory.\")\n\n   endsubmit;\nquit;\n\n\n\n/*-----------------------------------------------------------------------------------------*\n   Remove execution-time macro variables.\n*------------------------------------------------------------------------------------------*/\n\n%if %sysfunc(symexist(_SESSREF_)) %then %do;\n   %symdel casSessionExists;\n%end;\n"}}