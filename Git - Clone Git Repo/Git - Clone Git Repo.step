{"creationTimeStamp":"2023-01-26T21:26:20.149Z","modifiedTimeStamp":"2023-02-02T13:56:55.474Z","createdBy":"sinsrn","modifiedBy":"sinsrn","name":"Git - Clone Git Repo.step","displayName":"Git - Clone Git Repo.step","localDisplayName":"Git - Clone Git Repo.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/4f815079-8aae-440c-be5e-3ea10cb91c7f","uri":"/dataFlows/steps/4f815079-8aae-440c-be5e-3ea10cb91c7f","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/4f815079-8aae-440c-be5e-3ea10cb91c7f","uri":"/dataFlows/steps/4f815079-8aae-440c-be5e-3ea10cb91c7f","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/4f815079-8aae-440c-be5e-3ea10cb91c7f","uri":"/dataFlows/steps/4f815079-8aae-440c-be5e-3ea10cb91c7f","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/4f815079-8aae-440c-be5e-3ea10cb91c7f","uri":"/dataFlows/steps/4f815079-8aae-440c-be5e-3ea10cb91c7f"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/4f815079-8aae-440c-be5e-3ea10cb91c7f","uri":"/dataFlows/steps/4f815079-8aae-440c-be5e-3ea10cb91c7f","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/4f815079-8aae-440c-be5e-3ea10cb91c7f","uri":"/dataFlows/steps/4f815079-8aae-440c-be5e-3ea10cb91c7f","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[],"outputPorts":[{"name":"git_folder_table","displayName":"git_folder_table","localDisplayName":"git_folder_table","minEntries":0,"maxEntries":1,"type":"table","requiresStructure":false},{"name":"output_status_table","displayName":"output_status_table","localDisplayName":"output_status_table","minEntries":0,"maxEntries":1,"type":"table","requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page2\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Parameters\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Git - Clone Git Repo\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section1\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Git repository details\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"gitrepo\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide a Git repo address:\",\n\t\t\t\t\t\t\t\"placeholder\": \"e.g. git@github.com:User/repo.git\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"folderName\",\n\t\t\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\t\t\"label\": \"Select destination folder: \",\n\t\t\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\t\t\"placeholder\": \"sasserver:where/I/want/to/save/my/repo\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note: Git content is presently downloadable only to filesystem storage.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section2\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"SSH details\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"publicKeyFile\",\n\t\t\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\t\t\"label\": \"Enter location of public key file saved in filesystem:\",\n\t\t\t\t\t\t\t\"pathtype\": \"file\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"privateKeyFile\",\n\t\t\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\t\t\"label\": \"Enter location of private key file saved in filesystem:\",\n\t\t\t\t\t\t\t\"pathtype\": \"file\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"sshUser\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide SSH username (default is git):\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"sshKeyPassword\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide SSH key password (if applicable, else leave blank):\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"git_folder_table\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Git folder details table (optional)\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"output_status_table\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"Status table (optional)\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"page1\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"About_Text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Git - Clone Git Repo\\n\\nThis custom step helps you clone from a Git repository service  (like GitHub, GitLab etc.) to a filesystem folder.\\n\\nSAS already provides Git integration capabilities in the SAS Studio user interface and through SAS functions (code).  Refer documentation section below for details.\\n\\nSimilar functionality, provided through this custom step, will help you access source code from within a SAS Studio Flow (which is basically a SAS program provided through low-code components).  This enables portability and provides you Git version control, change tracking, and versatility in terms of choosing the analytics environment where you execute a set of SAS programs.   \\n\\nGit repositories:\\n\\nThis custom step can connect to and pull code from public and restricted access (subject to access rights) repositories on GitHub or GitLab. While not tested, it can also clone from a corporate Git repository (for example, gitlab.company.com) if the SAS Viya environment is within the same Virtual Private Network (VPN).\\n\\nParameters:\\n\\nSection - Git repository details:\\n\\n1. Address of the Git repo you wish to clone:  Note that it is of the format git@repo-address.git for SSH connections. Also note that a future release will also allow for providing addresses as per the Secure HTTPS connection (https://git-repo.git).\\n2.Destination folder: This is a folder on your filesystem.  Ensure that this is an empty folder when cloning from a git repository.\\n\\nSection - SSH details:\\n\\n1. Path to your public key file.\\n2. Path to your private key file.\\n\\nFor #s 2 and 3 above, ensure that your key files are saved in a filesystem folder with proper access rights. These keys contain credential information and are typically saved within folders which only the user can access.\\n\\n3. SSH user name: This is usually git. Leave the value as it is for most cases unless you know otherwise. For example, if your SSH URL is “git@github.com:myname/myrepo.git” then the SSH user name is“git”.\\n4. SSH password: Specify the password for your SSH key. If your SSH keys are not password protected, specify empty quotation marks (\\\"\\\" or '').\\n\\nOutput ports/tables:\\n\\nYou can optionally specify two output ports. \\n\\n1. Git folder details table: Specify a table which will be used to store metadata about the git folder that has been pulled.  In this initial release, only the top level folder name is provided, which can be used for downstream tasks (such as referring to a file location).  In future, we will list out all contents of the repo so that users can view the details of the files pulled.\\n2. Status table: A simple status table which contains the return code after the GIT_CLONE function. Refer documentation links below for a description of the return codes. A return code of 0 indicates that the repo was successfully cloned.\\n\\nSAS documentation:\\n\\n1. Understanding Git Integration in SAS Studio: https://go.documentation.sas.com/doc/en/sasstudiocdc/default/webeditorcdc/webeditorug/p0puc7muifjjycn1uemlm9lj1jkt.htm\\n2. Using Git Functions in SAS: https://go.documentation.sas.com/doc/en/pgmsascdc/default/lefunctionsref/n1mlc3f9w9zh9fn13qswiq6hrta0.htm\\n3. Configuration Properties for Git Integration: https://go.documentation.sas.com/doc/en/sasstudiocdc/default/webeditorcdc/webeditorag/p1a2vn20wzwkumn1freonkz81mx5.htm\\n\\nCreated / contact : \\n\\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com)\\n\\nVersion : 1.0.   (25JAN2023)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"gitrepo\": \"\",\n\t\t\"folderName\": \"\",\n\t\t\"publicKeyFile\": \"\",\n\t\t\"privateKeyFile\": \"\",\n\t\t\"sshUser\": \"git\",\n\t\t\"sshKeyPassword\": \"\",\n\t\t\"git_folder_table\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"output_status_table\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t}\n\t}\n}","templates":{"SAS":"/* SAS templated code goes here */\n\n/* Extract values from user interface */\ndata _null_;\n   call symput(\"folderName\",scan(\"&folderName.\",2,\":\",\"MO\"));\n   call symput(\"publicKeyFile\",scan(\"&publicKeyFile.\",2,\":\",\"MO\"));\n   call symput(\"privateKeyFile\",scan(\"&privateKeyFile.\",2,\":\",\"MO\"));\nrun;\n\n/* If a status table has not been specified, assign output_status_table macro variable as \"_NULL_\"; */\n%if %symexist(output_status_table) = 0 %then %do;\n   %let output_status_table=_NULL_;\n%end;\n\n/* If a details table has not been specified, assign git_folder_table macro variable as \"_NULL_\"; */\n%if %symexist(git_folder_table) = 0 %then %do;\n   %let git_folder_table=_NULL_;\n%end;\n\n/* Clone the Repo */\ndata &output_status_table.;\n/* rc stands for return code which captures any errors or messages that occur during the git cloning process. */\n   rc = GIT_CLONE(\"&gitrepo.\",\"&folderName.\",\"&sshUser.\",\"&sshKeyPassword.\",\"&publicKeyFile.\",\"&privateKeyFile.\");\n/* Save the return code inside a macro variable */\n   call symput(\"gcrc\",rc);\nrun;\n\n/* Create Output Status Table based on Return Code */\n%if &gcrc=0 %then %do;\n\n   data &git_folder_table.;\n   length folder_name $200. type $6. level 8.;\n   folder_name=\"&folderName.\";\n   type=\"Folder\";\n   level=0;\n   output;\n   run;\n\n/* FUTURE PLACEHOLDER: This above dataset will be enriched with many more details such as a listing of all assets within itself and subdirectories, as well as codifying the same within macro variables. */\n\n%end;"}}
